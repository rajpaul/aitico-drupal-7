<?php
//get handshaking value from settings
$handshaking_value = variable_get('handshaking_value');

define('AITICO_ENCRYPT_KEY', 5421); 
define('ENABLED_HAND_SHAKE', $handshaking_value); 
define('DEFAULT_CST_NEXT_CONNECTION_SEC', 60); 

//Device status
define('CHARGING', 0); 
define('READY', 1); 
define('RESERVED', 2);
define('LOANED', 3);
define('EXPIRED', 4);
define('SERVICE', 5);
define('PRERESERVED', 6);
define('INACTIVE',7);
/**
 * Hook menu
 *
 * @return array
 */
function aitico_api_menu() {    
    
    //Api keep-alive action
    $items['api/keep-alive'] = array(
        'title' => 'Keep alive',
        'page callback' => 'handle_keep_alive_request',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'models/aitico_api.php'
    );
    
    //Api getpermission action
    $items['api/get-permission'] = array(
        'title' => 'checking permission',
        'page callback' => 'handle_get_permission_request',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'models/aitico_api.php'
    );

    $items['api/device-info'] = array(
        'title' => 'Device information',
        'page callback' => 'device_info',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'models/aitico_api.php'
    );
    //initial keep alive
    $items['api/initial-keep-alive'] = array(
        'title' => 'Initial Keep Alive',
        'page callback' => 'initial_keep_alive_request',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'models/aitico_api.php'
    );
    return $items;
}

/**
 * Handle keep alive request to update device status
 * with atuthentication check
 * and send response accordingly
 *
 *
 */
function handle_keep_alive_request(){
    $error = false;
    $salt = "";
    $response_message = "";
    $handshaking = FALSE;
    
    $request = drupal_get_query_parameters($_POST);
    if(!$request or !$request['data'])
       return drupal_not_found();
    
    add_api_log($request, "keep-alive", null, $hash);

    $json_string = $request['data'];
    $hash =  ($request['hash'])? $request['hash']: "";
    $allRequestData = json_decode($json_string);
    if(!$allRequestData){
        $error = true;
        $response_message = "Json string format is incorrect!";
    }else{
        $cstId = $allRequestData[0]->cstid;
        $devices = $allRequestData[0]->devices;

        $cst = get_cst_node($cstId);         
        if(!$cst){
            $error = true;
            $response_message = "Invalid cstid!";
        }
        else{
            
            $cst->field_next_update["und"][0]["value"] = time() + DEFAULT_CST_NEXT_CONNECTION_SEC * 3;
            node_save($cst);
            $salt = $cst->field_salt['und'][0]['value'];
            if(ENABLED_HAND_SHAKE){
               $handshaking = get_hand_shaking_for_keep_alive($hash, $salt);
               if(!$handshaking){
                  $error = true;
                  $response_message = "Hand shaking failed";
               }
            }
            
            if(!ENABLED_HAND_SHAKE or $handshaking){
                foreach ($devices as $device){
                   if($device->statuscode == 0 or $device->statuscode == 1)
                       add_update_device($device, $cst->nid);
                }
            }
            //add_api_log($request, "keep-alive", $cst->nid, $hash);
        }
    }
    
    send_keep_alive_response($error, $response_message, $salt);
}

/**
 * Handle get permission request to allow and manage device rental
 * with atuthentication check
 * and send response accordingly
 *
 */
function handle_get_permission_request(){
    
    $request = drupal_get_query_parameters(); 
    $is_allowed = true;
    $return_time = time();
    $salt = "";
    $device_id = null;
    $handshaking = FALSE;
    if(!$request){
      return drupal_not_found();
    }
    
    $error_code = null;
    $error = false;
    $pincode = (isset($request['pincode']))? $request['pincode'] : '';
    $cstid = (isset($request['cstid']))? $request['cstid'] : '';
    $hash = (isset($request['hash']))? $request['hash'] : '';
     
   
    //Adding log for testing purpose
    add_api_log($request,"get-permission", $cstid, $hash);
            
    $cst_node = get_cst_node($cstid);    
    
    if($cst_node)
    $salt = $cst_node->field_salt['und'][0]['value'];

    if(ENABLED_HAND_SHAKE && isset($salt)){
       $handshaking = get_hand_shaking($hash, $salt);
       if(!$handshaking){
          $error = true;
          $response_message = "Hand shaking failed";
          $error_code = 0;
       }
    }
    if(!ENABLED_HAND_SHAKE or $handshaking){ 
        if($cst_node){
            $site_id = $cst_node->field_parent_site['und'][0]['target_id'];
            $pin_code_node = get_pin_code_by_site($site_id, $pincode); 
    
            if($pin_code_node){ 
                
                if($pin_code_node->field_acquired['und'][0]['value']) {
                    $is_allowed = false;
                }
                else {
                    $device = getMinimumUsedDeviceCST($cst_node->nid);
                        if($device){
                        $device_id = $device->field_deviceid['und'][0]['value'];
                        $pin_code_node->field_device['und'][0]['target_id'] = $device->nid;
                        $pin_code_node->field_cst_loan_id['und'][0]['target_id'] = $cst_node->nid;
                        node_save($pin_code_node);
                        $device->field_statuscode['und'][0]['value'] = RESERVED;
                        node_save($device);
                    }
                    $is_allowed = true;                   
                }
                $error = false;
            }
            else {
                $error_code = 1;
                $response_message = "False PIN code";
                $error = true;
            }
        }
        else{
             $error_code = 2;
             $response_message = "Bad request!!";
             $error = true;
        }
    }
    
    send_request_permission_response($error, $error_code, $is_allowed, $device_id, $response_message, $salt);
 
    
}

/**
 *send response from request permission call
 */
function send_request_permission_response($error, $error_code, $is_allowed, $device_id, $response_message, $salt){
    if($error){ 
        $responses = array( 
            "reasoncode"    => $error_code,
            "message"       => $response_message,       
            "responseid"    => md5(time())
        );
        json_response_error($responses);
    } else {
       $responses = array( 
            "allowed"           => $is_allowed,
            "message"           => "success",
            "deviceid"          => $device_id,
            "responseid"        => md5(time())
        );
       
        if($salt){ 
            
            $json_message = drupal_json_encode($responses);
            $json_message = str_replace(" ", "", $json_message);
            $response_hash = md5($json_message.$salt);
        }
        else{
            $response_hash = null;
        }
        
        json_response_success($responses, $response_hash);
    }    
    
}


/**
 *check and update expired device
 *
 */
function aitico_api_cron() {
    $status = 3;
    $devices = cron_load_all_device_by_status($status);
    
    foreach ($devices as $device){
        $deviceLog = cron_get_log_by_devices($device);
        if($deviceLog) {
            $duration = $deviceLog->field_duration['und'][0]['value'] ;
            $durationArr = explode(":",$duration);
            $durationInSeconds = ($durationArr[0] * 60 + $durationArr[1]) * 60;
            $acquiredTime = $deviceLog->field_acquired['und'][0]['value'] ;
            if(time() > ($acquiredTime + $durationInSeconds)){
                cron_update_log_by_device($device);    
                $device->field_statuscode['und'][0]['value'] = EXPIRED;
            }
            node_save($device);
        }
    }

}

function cron_update_log_by_device($device, $cstLoanId = null, $cstReturnId = null){
    $deviceLog = cron_get_log_by_devices($device); 
    if($deviceLog) {
        $deviceLog->field_returned['und'][0]['value'] = time();
        if($cstLoanId)
            $deviceLog->field_cst_loan_id['und'][0]['value'] = $cstLoanId;
        if($cstReturnId)
            $deviceLog->field_cst_return_id['und'][0]['value'] = $cstReturnId;
        node_save($deviceLog);
    }
}

function cron_get_log_by_devices($device){
    $query = new EntityFieldQuery();   
    
    $result = $query
      ->entityCondition('entity_type', 'node')
     ->propertyCondition('type', "log")      
     ->fieldCondition('field_device', 'target_id', $device->nid, '=')->execute();

   if($result){
        $node = array_slice($result['node'], 0, 1);
        $node = current($node);
        return node_load($node->nid);
   }
   
   return null;    
}

function cron_load_all_device_by_status($status){
    
    $nodes = array();
    $query = new EntityFieldQuery();
    $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', "device")
    ->fieldCondition('field_statuscode', 'value', $status, '=')->execute();

    if($result) {
        foreach ($result["node"] as $key => $res){
            $nodes[] =  $key;
        }
    }
    
    $devices = node_load_multiple($nodes);
    return $devices;
}
function send_keep_alive_response($error, $response_message, $salt){
    if($error) {    
        $responses = array( 
            "responseid"           => time(),
            "message"              => $response_message
        );
        json_response_error($responses);
    }
    else {
        $responses = array( 
            "nextupdateinseconds"  => DEFAULT_CST_NEXT_CONNECTION_SEC,
            "responseid"           => "12354g134g3141g34fdsa",
            "message"              => "Api ran successfully!!",
        );
        
        if($salt){
            $json_message = drupal_json_encode($responses);
            $json_message = str_replace(" ", "", $json_message);
            $response_hash = md5($json_message.$salt);
        }
        else{
            $response_hash = null;
        }
        json_response_success($responses, $response_hash);
    }
    
}

/**
 * Call back action for keepalive api
 * 
 */
function keep_alive(){

    $_files = array();
    $error = true;
    $salt = "";
    $response_message = "";
    $request = drupal_get_query_parameters($_POST);

    if(!$request){
       return drupal_not_found();
    }
    
    $json_string = ($request['data'])? $request['data']: $error = true;  
    $hash =  ($request['hash'])? $request['hash']: "";  
    
    //Add api for log for test purpose
    add_api_log($request, "keep-alive", null, $hash);
    
    //$req_URI =hash=92f0119a1409d72d708b9bf8ac10ccf3&data=[{"cstid":5001,"devices":[{"deviceid":500,"name":"device1","statuscode":0,"loaneduntil":null,"batterylevel":400},{"deviceid":600,"name":"device1","statuscode":5,"loaneduntil":null,"batterylevel":400}]}];
    
    $arrs = json_decode($json_string);
        
    if ($arrs){
        foreach ($arrs as $arr){ 

            $cst = get_cst_node($arr->cstid);         

            if(!$cst){
                $error = true;
                $response_message = "Invalid cstid!";
                break;
            }
            
            //Update cst with next connection
            //$cst->field_next_update["und"][0]["value"] = time() + mktime(0, 0, DEFAULT_CST_NEXT_CONNECTION_SEC*3);
            $cst->field_next_update["und"][0]["value"] = time() + DEFAULT_CST_NEXT_CONNECTION_SEC * 3;
            node_save($cst);

            $salt = $cst->field_salt['und'][0]['value'];
            
            if(ENABLED_HAND_SHAKE) { // is enabled hand shaked 

                //Get hand shaking to check valid api call
                $handshaking = get_hand_shaking_for_keep_alive($hash, $salt);   

                if(!$handshaking) {
                    $error = true;
                    $responses = array( 
                         "responseid"           => time(),
                         "prereserved"          => 2,
                         "message"              => "Hand shaking failed"
                    );
                    json_response_error($responses);
                    break;
                }        
            }

            //Get files based on slots
            $_files = get_file_groups($cst->nid);

            //Update all device status code into 5 under cst
            //update_device_status_under_cst($cst->nid);

            //Adding or updating device under the cst
            if($arr->devices) {
                foreach ($arr->devices as $device){
                   save_device($device, $cst->nid);
                }
            }
            else{
                $error = true;
                $response_message = "No devies found!";
                break;
            }
            
            $error = false;

            //Add api for log for testing purpose
             add_api_log($request, "keep-alive", $cst->nid, $hash);
        }

    }
    else {
        $error = true;
        $response_message = "Json string format is incorrect!";
    }
    
    if($error) {    
        $responses = array( 
             "responseid"           => time(),
             "prereserved"          => 0,
             "message"              => $response_message
        );
        
         //Json response
         json_response_error($responses);
    }
    else {
          $responses = array( 
             "nextupdateinseconds"  => DEFAULT_CST_NEXT_CONNECTION_SEC,
             "responseid"           => "12354g134g3141g34fdsa",
             "prereserved"          => 0,
             "message"              => "Api run successfully!!",
             "filegroups"           => $_files
        );
        
        
        if($salt){ //checking salt existance
            $json_message = drupal_json_encode($responses);
            $json_message = str_replace(" ", "", $json_message);
            $response_hash = md5($json_message.$salt);
        }
        else{
            $response_hash = null;
        }
        //Json response 
        json_response_success($responses, $response_hash);
    }
    
}

/**
 *Call back for get permission
 * 
 */
function check_permission(){
    
    $request = drupal_get_query_parameters(); 
    $is_allowed = true;
    $return_time = time();
    $salt = "";
    
    if(!$request){
      return drupal_not_found();
    }
    
    $error_code = null;
    $error = false;
    $deviceId = (isset($request['device']))? $request['device'] : '';
    $pincode = (isset($request['pincode']))? $request['pincode'] : '';
    $cstid = (isset($request['cstid']))? $request['cstid'] : '';
    $hash = (isset($request['hash']))? $request['hash'] : '';
     
   
    //Adding log for testing purpose
    add_api_log($request,"get-permission", $cstid, $hash);
            
    $cst_node = get_cst_node($cstid);    
    $device_node = get_existing_device($deviceId);
    
    if($cst_node)
    $salt = $cst_node->field_salt['und'][0]['value'];
    
//    Add log for permission checking
//    if ($device_node)
//    add_log($request);
    
    if(ENABLED_HAND_SHAKE && isset($salt)) { // check Is enabled hand shaked 
        
        //Get hand shaking to check valid api call
        $handshaking = get_hand_shaking($hash, $salt);   

        if(!$handshaking) {
             $responses = array( 
                "reasoncode"    => 0,
                "message"       => "Hand shaking failed!",       
                "responseid"    => md5(time())
            ); 
            
            //checking salt existance 
            if($salt){ 
                $json_message = drupal_json_encode($responses);
                $json_message = str_replace(" ", "", $json_message);
                $response_hash = md5($json_message.$salt);
            }
            else{
                $response_hash = null;
            }
        
            //Json response 
            json_response_success($responses, $response_hash);
        }        
    }        
     
   if($cst_node && $device_node){ // check valid cst and device

        $cstid = $device_node->field_charging_station['und'][0]['target_id'];
        
        if($cstid == $cst_node->nid ){ //check device under the cst
            
           $pin_code_node = get_pin_code($cstid, $pincode); 

           if($pin_code_node){ // check pincode valid
               
               $return_time = $pin_code_node->field_returned['und'][0]['value'];
               
               //update log table
               if($pin_code_node->field_device['und'][0]['target_id'] == $device_node->nid) {
                   $is_allowed = false;
               }
               else {
                   $pin_code_node->field_acquired['und'][0]['value'] = time();
                   $pin_code_node->field_device['und'][0]['target_id'] = $device_node->nid;  
                   node_save($pin_code_node);
                   $is_allowed = true;                   
               }
               $error = false;
           }
           else {
               $error_code = 1;
               $error = true;
           }
        }
        else {
           $error_code = 2; 
           $error = true;
       }
    }
    else{
        $error_code = 2; 
        $error = true;
    }
    
    if($error){ //check errror found
        $responses = array( 
            "reasoncode"    => $error_code,
            "message"       => "Bad request!!",       
            "responseid"    => md5(time())
        );
        //Json error response
        json_response_error($responses);
    } else {
       $responses = array( 
            "allowed"           => $is_allowed,
            "returntimestamp"   => $return_time,   
            "message"           => "success",
            "responseid"        => md5(time())
        );
       
        //checking salt existance 
        if($salt){ 
            
            $json_message = drupal_json_encode($responses);
            $json_message = str_replace(" ", "", $json_message);
            $response_hash = md5($json_message.$salt);
        }
        else{
            $response_hash = null;
        }
        
        // Json success response
        json_response_success($responses, $response_hash);
    }    
 
}

/**
 * Json error response
 *
 * @param array $responses 
 */
function json_response_error(array $responses){
    $data  = $responses;
    drupal_add_http_header('Status', '400: BAD REQUEST');
    drupal_add_http_header('Content-Type', 'application/json');    
    drupal_json_output($data);
    
    drupal_exit();
}

/**
 * Json success response 
 * 
 * @param array $responses 
 */
function json_response_success(array $responses, $hash = null){
    
    $data  = $responses;
    drupal_add_http_header('Status', '200 Ok');
    drupal_add_http_header('Content-Type', 'application/json');  
    
    if($hash) {
        drupal_add_http_header('Content-Hash', $hash);   
    }
    
    drupal_json_output($data);

    drupal_exit();    
}

/**
 * Initial Keep Alive Response
 * @param type $error
 * @param type $response_message
 * @param type $hash
 * @param type $salt 
 * 
 */
function initial_keep_alive_response($error, $response_message, $hash = null, $salt=null) {

    if ($error) {
        $responses = array(
            "responseid" => time(),
            "message" => $response_message
        );
        json_response_error($responses);
    } else {
        $responses = array(
            "responseid" => "12354g134g3141g34fdsa",
        );
        
        if ($salt) {
            $json_message = drupal_json_encode($responses);
            $json_message = str_replace(" ", "", $json_message);
            $response_hash = md5($json_message . $salt);
        } else {
            $response_hash = null;
        }
        json_response_success($responses, $hash);
    }
}
/**
 * Initial keep alive request to add device
 * with atuthentication check
 * and send response accordingly
 *
 *
 */
function initial_keep_alive_request() {
    $error = false;
    $salt = "";
    $response_message = "";
    $handshaking = false;

    $request = drupal_get_query_parameters($_POST);
    if (!$request or !$request['data'])
        return drupal_not_found();

    $json_string = $request['data'];

    $hash = ($request['hash']) ? $request['hash'] : "";
    $allRequestData = json_decode($json_string);

    if (!$allRequestData) {
        $error = true;
        $response_message = "JSON string format is incorrect!";
    } else {
        $cstId = $allRequestData[0]->cstid;
        $devices = $allRequestData[0]->devices;

        $cst = get_cst_node($cstId);
        if (!$cst) {
            $error = true;
            $response_message = "Invalid CST Id!";
        } else {           
            $salt = $cst->field_salt['und'][0]['value'];
            if (ENABLED_HAND_SHAKE) {
                $handshaking = get_hand_shaking_for_keep_alive($hash, $salt);
                if (!$handshaking) {
                    $error = true;
                    $response_message = "Hand shaking failed";
                }
            }
            if (!$handshaking or $handshaking) {
                foreach ($devices as $device) {
                    if ($device->type == 1 or $device->type == 2) {
                        //Add Device
                        initial_add_device($device, $cst->nid);
                    }
                }           
            }            
        }
    }
    //Response
    initial_keep_alive_response($error, $response_message, $hash=null,$salt=null);
}