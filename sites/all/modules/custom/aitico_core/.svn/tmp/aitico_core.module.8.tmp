<?php

/*
 * method to list all permissions of aitico_core module
 */

function aitico_core_permission() {
    return array(
        'SYSTEM_ADMIN' => array(
            'title' => t('System Admin'),
            'description' => t('Super user')
        ),
        'CREATE_USER' => array(
            'title' => t('Create User'),
            'description' => t('Create a new user')
        ),
        'UPDATE_USER' => array(
            'title' => t('Update User'),
            'description' => t('Update an existing User')
        ),
        'LIST_USER' => array(
            'title' => t('List User'),
            'description' => t('List view of Users')
        ),
        'DELETE_USER' => array(
            'title' => t('Delete User'),
            'description' => t('Delete an existing User')
        ),
        'VIEW_USER' => array(
            'title' => t('View User'),
            'description' => t('View an existing User')
        ),
        'CREATE_COMPANY' => array(
            'title' => t('Create Company'),
            'description' => t('Create a new company')
        ),
        'DELETE_COMPANY' => array(
            'title' => t('Delete Company'),
            'description' => t('Delete an existing company')
        ),
        'UPDATE_COMPANY' => array(
            'title' => t('Update Company'),
            'description' => t('Update an existing company')
        ),
        'VIEW_COMPANY' => array(
            'title' => t('View Company'),
            'description' => t('View a company details')
        ),
        'LIST_COMPANY' => array(
            'title' => t('List Company'),
            'description' => t('List view of companies')
        ),
        'CREATE_SITE' => array(
            'title' => t('Create Site'),
            'description' => t('Create a new site')
        ),
        'DELETE_SITE' => array(
            'title' => t('Delete Site'),
            'description' => t('Delete an existing site')
        ),
        'UPDATE_SITE' => array(
            'title' => t('Update Site'),
            'description' => t('Update an existing site')
        ),
        'VIEW_SITE' => array(
            'title' => t('View Site'),
            'description' => t('View a site')
        ),
        'LIST_SITE' => array(
            'title' => t('List Site'),
            'description' => t('List view of sites')
        ),
        'CREATE_CST' => array(
            'title' => t('Create Cst'),
            'description' => t('Create a new CST')
        ),
        'DELETE_CST' => array(
            'title' => t('Delete Cst'),
            'description' => t('Delete an existing CST')
        ),
        'UPDATE_CST' => array(
            'title' => t('Update Cst'),
            'description' => t('Update an existing CST')
        ),
        'VIEW_CST' => array(
            'title' => t('View Cst'),
            'description' => t('View a CST')
        ),
        'LIST_CST' => array(
            'title' => t('List Cst'),
            'description' => t('List view of CST')
        ),
        'SETTINGS' => array(
            'title' => t('Settings'),
            'description' => t('Set system wide alert boundaries')
        ),
        'STAT_COMPANY' => array(
            'title' => t('Stat Company'),
            'description' => t('Company level statistics')
        ),
        'STAT_SITE' => array(
            'title' => t('Stat Site'),
            'description' => t('Site level statistics')
        ),
        'STAT_CST' => array(
            'title' => t('Stat Cst'),
            'description' => t('CST level statistics')
        ),
        'CHANGE_COMPANY_LOGO' => array(
            'title' => t('Change Company Logo'),
            'description' => t('Sets company logo')
        ),
        'CREATE_CONTENT_GROUP' => array(
            'title' => t('Create Content Group'),
            'description' => t('Create a group of slots')
        ),
        'CREATE_SLOT' => array(
            'title' => t('Create Slot'),
            'description' => t('Create a slot or file type')
        ),
        'ASSIGN_SLOT' => array(
            'title' => t('Assign Slot'),
            'description' => t('Assign a particular slot to a user')
        ),
        'ADD_SLOT_TO_GROUP' => array(
            'title' => t('Add Slot To Group'),
            'description' => t('Add a Slot to a content group')
        ),
        'ADD_FILE_TO_SLOT' => array(
            'title' => t('Add File To Slot'),
            'description' => t('Add file to existing slot (assigned to the role)')
        ),
        'DELETE_FILE_FROM_SLOT' => array(
            'title' => t('Delete File From Slot'),
            'description' => t('Remove a file from an existing slot')
        ),
        'RENT_DEVICE' => array(
            'title' => t('Rent Device'),
            'description' => t('Generate PIN code which would allow renting device')
        ),
        'RENT_TAB' => array(
            'title' => t('Rent Tab'),
            'description' => t('Rent tab view')
        ),
        'ADMINISTRATION_TAB' => array(
            'title' => t('Administration Tab'),
            'description' => t('Administration tab view')
        ),
        'HELP_TAB' => array(
            'title' => t('Help Tab'),
            'description' => t('Help tab view')
        ),
        'SETTINGS_TAB' => array(
            'title' => t('Settings Tab'),
            'description' => t('Settings tab view')
        ),
        'CREATE_SUPERADMIN' => array(
            'title' => t('Create Superadmin'),
            'description' => t('Create a system wide user')
        ),
        'CREATE_SUPERCONTENTADMIN' => array(
            'title' => t('Create Supercontentadmin'),
            'description' => t('System wide user for content management')
        ),
        'CREATE_COMPANYADMIN' => array(
            'title' => t('Create Companyadmin'),
            'description' => t('Company level user')
        ),
        'CREATE_CONTENTADMIN' => array(
            'title' => t('Create Contentadmin'),
            'description' => t('Company company level content management')
        ),
        'CREATE_OPERATOR' => array(
            'title' => t('Create Operator'),
            'description' => t('Lowest level CMS application user')
        ),
    );
}

require_once(DRUPAL_ROOT . "/modules/node/node.pages.inc");

define('AITICO_CORE_TEMPLATE_DIR', drupal_get_path('module', 'aitico_core') . '/templates');
define('AITICO_CORE_MODULE_DIR', drupal_get_path('module', 'aitico_core'));

// constant for roles checking
define('CREATE_SUPERADMIN', 'CREATE_SUPERADMIN');
define('CREATE_SUPERCONTENTADMIN', 'CREATE_SUPERCONTENTADMIN');
define('CREATE_COMPANYADMIN', 'CREATE_COMPANYADMIN');
define('CREATE_CONTENTADMIN', 'CREATE_CONTENTADMIN');
define('CREATE_OPERATOR', 'CREATE_OPERATOR');
define('SUPER_ADMIN', 'Super Admin');
define('SUPER_CONTENTADMIN', 'Super Content Admin');
define('CONTENT_ADMIN', 'Content Admin');
define('COMPANY_ADMIN', 'Company Admin');
define('OPERATOR', 'Operator');

/**
 * Implementation of hook_theme().
 */
function aitico_core_theme() {

    return array(
        'content_entry_page' => array(
            'variables' => array('title' => NULL, 'content' => NULL),
            'template' => 'content-entry-page',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'company_template' => array(
            'template' => 'company-list',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'company_form' => array(
            'template' => 'company-form',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'user_header' => array(
            'variables' => array('title' => NULL, 'content' => NULL),
            'template' => 'company-user-header',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aco_user_list' => array(
            'template' => 'user-list',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        )
    );
}

/**
 * Implementation of hook_menu().
 */
function aitico_core_menu() {
    $items['site/new'] = array(
        'title' => 'Add Site',
        'page callback' => 'add_site_form',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    $items['charging_station/new'] = array(
        'title' => 'Add Charging Station',
        'page callback' => 'add_charging_station_form',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    //COMPANY LIST ACTION
    $items['company'] = array(
        'title' => 'Company',
        'page callback' => 'company_render',
        'access callback' => TRUE, //array('access content'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    //COMPANY FORM ACTION
    $items['company/new'] = array(
        'title' => 'Add new company',
        'page callback' => 'company_form',
        //'access callback' => 'has_access',
        'access arguments' => array('CREATE_COMPANY'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    // USER ADD ACTION    
    $items['user/new/%/%'] = array(
        'title' => 'Add new user',
        'page callback' => 'add_user_form',
        'page arguments' => array(2, 3),
        //'access callback' => true,
        'access callback' => 'user_access',
        'access arguments' => array('CREATE_USER'),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    // USER EDIT ACTION
    $items['user/edit/%'] = array(
    'title' => 'Edit user',
    'page callback' => 'edit_user_form',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('UPDATE_USER'),
    'type' => MENU_CALLBACK,
    'theme callback' => variable_get('theme_default', '0'),
    'file' => 'page_callbacks/aitico_core_callback.php',
    );

    //USER LIST ACTION
    $items['user/list/%/%'] = array(
        'title' => 'List Users',
        'page callback' => 'user_render',
        'page arguments' => array(2, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );


    //NODE EDIT 
    $items['node/%node/edit/%'] = array(
        'title' => '',
        'page callback' => 'edit_aitico_node_form',
        'page arguments' => array(1),
        'access callback' => 'node_access',
        'access arguments' => array('update', 1),
        'type' => MENU_CALLBACK,
       'file' => 'page_callbacks/aitico_core_callback.php',
    );

    //NODE DELETE
    $items['node/%/delete/%'] = array(
        'title' => '',
        'page callback' => 'delete_aitico_node_form',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
       'file' => 'page_callbacks/aitico_core_callback.php',
    );
    //SELF PASSWORD CHANGE
    $items['user/%/change_password'] = array(
        'title' => '',
        'page callback' => 'change_user_password',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    // Add logo for a specific company
    $items['company/%/logo'] = array(
        'title' => t('Select a PNG or JPG image for company logo'),
        'page callback' => 'edit_aitico_node_form',
        'page arguments' => array(1),
        'access arguments' => array('CREATE_COMPANY'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function aitico_core_menu_alter(&$menu) {
    $item = &$menu['user/%user/cancel'];
    $item['page callback'] = 'aitico_core_page_user_delete';
    $item['page arguments'] = array(1);
    $item['access callback'] = TRUE;
    $item['access callback'] = 'user_access';
    $item['access arguments'] = array('DELETE_USER');
    $item['theme callback'] = 'aitico_core_get_default_theme';
    
    $menu['administration']['page callback'] = 'aitio_core_admin_page';
    $menu['administration']['file'] = 'aitico_core_callback.php';
    $menu['administration']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';
    
    $menu['settings']['page callback'] = 'aitio_core_settings_page';
    $menu['settings']['file'] = 'aitico_core_callback.php';
    $menu['settings']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';
    
    
    $menu['rent']['page callback'] = 'aitio_core_rent_page';
    $menu['rent']['file'] = 'aitico_core_callback.php';
    $menu['rent']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';
    
    $menu['help']['page callback'] = 'aitio_core_help_page';
    $menu['help']['file'] = 'aitico_core_callback.php';
    $menu['help']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';
    
    
    
}

/**
 * Implements hook_block_info().
 */
function aitico_core_block_info() {
    $block = array();

    $block['company_user_header'] = array(
        'info' => 'Company User In Header',
        'cache' => DRUPAL_NO_CACHE,
    );

    return $block;
}

/**
 * Implements hook_block_view().
 *
 * 
 */
function aitico_core_block_view($delta = '') {
    global $user;
    $block = array();
    switch ($delta) {
        case 'company_user_header':
            $block['subject'] = t("");
            $block['content'] = company_user_header_content();
            break;
    }
    return $block;
}

function company_user_header_content() {
    if (!user_is_logged_in())
        return;

    global $user;
    $roles = $user->roles;
    $img_obj = null;
    $company_settings = db_query("SELECT * FROM {users_companies_sites} WHERE uid = :uid", array(':uid' => $user->uid))->fetch();
    if (!empty($company_settings)) {
        $company_node = node_load($company_settings->cid);
    }
    if (!empty($company_node->field_company_logo) && $company_node->field_company_logo['und'][0]['fid'] > 0) {
        $img_obj = file_load($company_node->field_company_logo['und'][0]['fid']);
    }
    if (in_array(SUPER_ADMIN, $roles) || in_array(SUPER_CONTENTADMIN, $roles) || $img_obj == null) {
        $company_logo = '<img src="/sites/default/files/aitico_logo.png"/>'; // used hard coded path for now as we dont have custom theme 
    } else {
        $options = array('style_name' => 'company_logo');
        $theme_name = 'image_style';
        $options['path'] = $img_obj->uri;
        $company_logo = theme($theme_name, $options);
    }


    return theme('user_header', array('user' => $user->name, 'company_logo' => $company_logo));
}

/*
 * Get Default theme 
 */

function aitico_core_get_default_theme() {
    return variable_get('theme_default', '0');
}

/**
 * Implementation of hook_form_alter().
 *
 */
function aitico_core_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    $roles = $user->roles;
    if ($form_id == 'company_node_form') {
        $form['title']['#title'] = t("Company Name");
        $form['additional_settings']['#access'] = FALSE;
        //hide($form['body']);
        hide($form['actions']['preview']);

        if ((arg(0) == 'company' && arg(1) == 'new') || (arg(0) == 'node' && arg(2) == 'edit')) {
            $form['field_company_logo']['#attributes']['class'][] = 'element-invisible';
        }

        if (isset($form['nid']['#value']) && !empty($form['nid']['#value']) && arg(2) != 'logo') {
            $form['actions']['submit']['#value'] = t('Save changes');
            $form['actions']['delete']['#type'] = 'hidden';
            if (in_array(COMPANY_ADMIN, $roles)) {
                //$form['title']['#attributes']['class'][] = 'element-invisible';                
                $form['title']['#access'] = 0;
            }
        } else if (isset($form['nid']['#value']) && !empty($form['nid']['#value']) && arg(2) == 'logo') {
            hide($form['body']);
            $form['actions']['submit']['#value'] = t('Save logo');
            $form['actions']['delete']['#type'] = 'hidden';
            $form['title']['#access'] = 0;
            $form['title']['#attributes']['class'][] = 'element-invisible';
        } else {
            $form['actions']['submit']['#value'] = t('Add Company');
            $form['field_company_logo']['#required'] = 0;
            hide($form['body']);
        }

        $form['#validate'][] = 'aitico_core_node_form_validate';
    }

    if ($form_id == 'site_node_form') {

        if (!isset($form['nid']['#value']) && empty($form['nid']['#value'])) {
            $parent_id = $_GET['parent_company_id'];
            $form['field_parent_company']['und']['#default_value'] = $parent_id;
            $form['actions']['submit']['#value'] = t('Add Site');
            hide($form['body']);
        } else {
            if (in_array(COMPANY_ADMIN, $roles)) {
                //$form['title']['#attributes']['class'][] = 'element-invisible';                
                $form['title']['#access'] = 0;
            }
            $form['actions']['submit']['#value'] = t('Save changes');
            $form['actions']['delete']['#type'] = 'hidden';
        }

        $form['title']['#title'] = t("Site Name");
        $form['field_parent_company']['#type'] = 'hidden';
        $form['additional_settings']['#access'] = FALSE;
        hide($form['actions']['preview']);
    }

    if ($form_id == 'charging_station_node_form') {

        if (!isset($form['nid']['#value']) && empty($form['nid']['#value'])) {
            $parent_id = $_GET['parent_site_id'];
            $form['field_parent_site']['und']['#default_value'] = $parent_id;
            $form['actions']['submit']['#value'] = t('Add Charging Station');
            hide($form['body']);
        } else {
            if (in_array(COMPANY_ADMIN, $roles)) {
                //$form['title']['#attributes']['class'][] = 'element-invisible';                
                $form['title']['#access'] = 0;
            }
            $form['actions']['submit']['#value'] = t('Save changes');
            $form['actions']['delete']['#type'] = 'hidden';
        }

        $form['title']['#title'] = t("Charging station name");
        $form['field_parent_site']['#type'] = 'hidden';
        $form['additional_settings']['#access'] = FALSE;
        hide($form['actions']['preview']);
    }
    if ($form_id == 'node_delete_confirm') {
        $nid = $form['nid']['#value'];
        $node = node_load($nid);

        //change cancel redirection
        $form['actions']['cancel']['#href'] = 'company';
        // add node delete submit handler

        $form['#submit'][] = 'node_delete_submit';

        return confirm_form($form, t('Are you sure you want to delete %title?', array('%title' => $node->title)), 'company',
                        //  isset($_GET['destination']) ? $_GET['destination'] : 'node/' . $node->nid,  
                        t('This action cannot be undone.'), t('Delete'), t('Cancel')
        );
    }

    if ($form_id == 'user_cancel_confirm_form') {

        $description = "Action is not reversable.<br>Are you sure you want to delete user?";
        $form['description']['#markup'] = t($description);
        $form['actions']['submit']['#value'] = t('Delete User');
        $form['#submit'][] = 'aitico_core_user_cancel_confirm_form_submit';

        return confirm_form($form, t('Delete user'), 'company');
    }
}

/**
 * Submit handler for node delete form
 * @param type $form
 * @param array $form_state 
 */
function node_delete_submit($form, &$form_state) {
    $node = $form_state['build_info']['args'][0];
    $nid = $node->nid;
    $node_type = $node->type;

    if ($node_type == 'company') {
        //get all child site
        $site_id_list = get_all_child_site_of_a_company($nid);
        $site_id_arr = array();
        foreach ($site_id_list as $site_id_row) {
            $site_id_arr[] = $site_id_row->nid;
        }
        $site_id_lists = implode(',', $site_id_arr);

        if (!empty($site_id_lists)) {

            //get all child cst
            $cst_id_list = get_all_charging_station_of_a_company($site_id_lists);
            $cst_id_arr = array();
            foreach ($cst_id_list as $cst_id_row) {
                $cst_id_arr[] = $cst_id_row->nid;
            }
            $cst_id_lists = implode(',', $cst_id_arr);
            //delete cst node
            node_delete_multiple($cst_id_arr);
        }
        //delete site node
        node_delete_multiple($site_id_arr);
    }
    if ($node_type == 'site') {
        $site_id = $nid;
        //get all child cst for a site
        $cst_id_list = get_all_charging_station_of_a_site($site_id);
        $cst_id_arr = array();
        foreach ($cst_id_list as $cst_id_row) {
            $cst_id_arr[] = $cst_id_row->nid;
        }
        $cst_id_lists = implode(',', $cst_id_arr);
        //delete cst node
        node_delete_multiple($cst_id_arr);
    }

    $form_state['redirect'] = 'company';
}

/*
 * Custom Validation for aitico node form
 */

function aitico_core_node_form_validate(&$form, &$form_state) {
    $file_id = $form_state['values']['field_company_logo']['und'][0]['fid'];
    if ($file_id == 0 && arg(2) == 'logo') {
        form_set_error('file_does_not_uploaded', t('Please upload logo !'));
        $form['title']['#access'] = 0;
        $form['title']['#attributes']['class'][] = 'element-invisible';
        hide($form['body']);
        $form['actions']['submit']['#value'] = t('Save logo');
    }
}

/**
 * Submit handler for the account cancellation confirm form.
 *
 * 
 */
function aitico_core_user_cancel_confirm_form_submit($form, &$form_state) {
    global $user;
    $account = $form_state['values']['_account'];

    // Cancel account immediately, if the current user has administrative
    // privileges, no confirmation mail shall be sent, and the user does not
    // attempt to cancel the own account.
    if (user_access('administer users') && empty($form_state['values']['user_cancel_confirm']) && $account->uid != $user->uid) {
        user_cancel($form_state['values'], $account->uid, $form_state['values']['user_cancel_method']);

        // $form_state['redirect'] = 'admin/people';
        $form_state['redirect'] = 'company';
    } else {
        // Store cancelling method and whether to notify the user in $account for
        // user_cancel_confirm().
        $edit = array(
            'user_cancel_method' => $form_state['values']['user_cancel_method'],
            'user_cancel_notify' => $form_state['values']['user_cancel_notify'],
        );
        $account = user_save($account, $edit);
        _user_mail_notify('cancel_confirm', $account);
        drupal_set_message(t('A confirmation request to cancel your account has been sent to your e-mail address.'));
        watchdog('user', 'Sent account cancellation request to %name %email.', array('%name' => $account->name, '%email' => '<' . $account->mail . '>'), WATCHDOG_NOTICE);

        $form_state['redirect'] = "user/$account->uid";
    }
}

/**
 * Aitio core custom model instance
 * 
 * @return aitico_core_model 
 */
function get_model() {
    return new aitico_core_model();
}

function get_aitico_user() {
    return new aitico_core_user();
}

/**
 * Check user permission to access
 * 
 * @param type $arg
 * @return type 
 */
function has_access($arg) {
    return get_aitico_user()->hasAccess($arg);
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function aitico_core_user_form_submit($form, &$form_state) {
    $name = $form_state['values']['name'];
    $pass = $form_state['values']['pass'];
    $mail = $form_state['values']['mail'];
    $role = $form_state['values']['roles'];
    $comapnyId = $form['#companyId'];
    $siteId = $form['#siteId'];
    //echo 'companyId=' . $comapnyId . ' siteId=' . $siteId; exit;
    $new_user = array(
        'name' => $name,
        'pass' => $pass,
        'status' => 1,
        'mail' => $mail,
    );
    $user = user_save(null, $new_user);
    // now save roles
    db_insert('users_roles')
            ->fields(array(
                'uid' => $user->uid,
                'rid' => $role,
                    )
            )
            ->execute();

    // now save company and site
    db_insert('users_companies_sites')
            ->fields(array(
                'uid' => $user->uid,
                'cid' => $comapnyId,
                'sid' => $siteId,
                    )
            )
            ->execute();

    drupal_set_message(t('User has been added successfully'), 'status');
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function aitico_core_user_edit_form_submit($form, &$form_state) {
    $account = $form_state['#account'];
    $account_unchanged = clone $account;
    entity_form_submit_build_entity('user', $account, $form, $form_state);

    // Populate $edit with the properties of $account, which have been edited on
    // this form by taking over all values, which appear in the form values too.   
    $edit = array_intersect_key((array) $account, $form_state['values']);
    $edit["roles"] = array($edit["roles"] => "");

    $user = user_save($account_unchanged, $edit);

    // Reload user roles if provided.
    $role = $form_state['values']['roles'];

    db_insert('users_roles')
            ->fields(array(
                'uid' => $account->uid,
                'rid' => $role,
                    )
            )
            ->execute();
    drupal_set_message(t('User has been updated successfully'), 'status');
}

/**
 * Form validation handler for aitico_core_user_form().
 *
 * @see aitico_core_user_form
 * @param $form
 * @param $form_state
 */
function aitico_core_user_form_validate($form, &$form_state) {
    // Validate new or changing username.
    $isUser = (bool) db_query("SELECT uid FROM {users} WHERE name = :name ", array(':name' => $form_state['values']['name']))->fetchField();
    if (isset($form_state['values']['name'])) {
        if ($error = user_validate_name($form_state['values']['name'])) {
            form_set_error('name', $error);
        } elseif ($isUser) {
            form_set_error('name', t('The name %name is already taken.', array('%name' => $form_state['values']['name'])));
        }
    }
    // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
    // warnings often caused by cutting and pasting.
    $mail = trim($form_state['values']['mail']);
    form_set_value($form['account']['mail'], $mail, $form_state);

    $isExistsEmail = (bool) db_query("SELECT uid FROM {users} WHERE mail = :mail ", array(':mail' => $form_state['values']['mail']))->fetchField();


    // Validate the e-mail address, and check if it is taken by an existing user.
    if ($error = user_validate_mail($form_state['values']['mail'])) {
        form_set_error('mail', $error);
    } elseif ($isExistsEmail) {
        // Format error message dependent on whether the user is logged in or not.
        if ($GLOBALS['user']->uid) {
            form_set_error('mail', t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['mail'])));
        } else {
            form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
        }
    }
}


/**
 * Password change form validation.
 */
function aitico_core_password_form_validate($form, &$form_state) {

    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $account = $form_state['#account'];
    // Make sure the provided current password is valid for this account.
    $current_pass_failed = empty($form_state['values']['current_pass']) || !user_check_password($form_state['values']['current_pass'], $account);
    if ($current_pass_failed) {
        form_set_error('current_pass', t('The current password you provided is incorrect.'));
    }
}

/**
 * Password change form submit.
 */
function aitico_core_password_form_submit($form, &$form_state) {
    global $user;

    $account = $form_state['#account'];

    $pass = $form_state['values']['pass'];

    user_save($account, array('pass' => $pass));
    drupal_set_message(t('Password has been changed.'));
}



/**
 * Check user is login, if not redirect to login page
 * @return type 
 * 
 */
function check_user_is_login() {
    if (user_is_logged_in()) {
        return true;
    } else {
        $path = "user/login";
        drupal_goto($path);
    }
}