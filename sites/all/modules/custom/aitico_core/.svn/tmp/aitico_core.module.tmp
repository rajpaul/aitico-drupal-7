<?php

/*
 * method to list all permissions of aitico_core module
 */

function aitico_core_permission() {
    return array(
        'SYSTEM_ADMIN' => array(
            'title' => t('System Admin'),
            'description' => t('Super user')
        ),
        'CREATE_USER' => array(
            'title' => t('Create User'),
            'description' => t('Create a new user')
        ),
        'UPDATE_USER' => array(
            'title' => t('Update User'),
            'description' => t('Update an existing User')
        ),
        'LIST_USER' => array(
            'title' => t('List User'),
            'description' => t('List view of Users')
        ),
        'DELETE_USER' => array(
            'title' => t('Delete User'),
            'description' => t('Delete an existing User')
        ),
        'VIEW_USER' => array(
            'title' => t('View User'),
            'description' => t('View an existing User')
        ),
        'CREATE_COMPANY' => array(
            'title' => t('Create Company'),
            'description' => t('Create a new company')
        ),
        'DELETE_COMPANY' => array(
            'title' => t('Delete Company'),
            'description' => t('Delete an existing company')
        ),
        'UPDATE_COMPANY' => array(
            'title' => t('Update Company'),
            'description' => t('Update an existing company')
        ),
        'VIEW_COMPANY' => array(
            'title' => t('View Company'),
            'description' => t('View a company details')
        ),
        'LIST_COMPANY' => array(
            'title' => t('List Company'),
            'description' => t('List view of companies')
        ),
        'CREATE_SITE' => array(
            'title' => t('Create Site'),
            'description' => t('Create a new site')
        ),
        'DELETE_SITE' => array(
            'title' => t('Delete Site'),
            'description' => t('Delete an existing site')
        ),
        'UPDATE_SITE' => array(
            'title' => t('Update Site'),
            'description' => t('Update an existing site')
        ),
        'VIEW_SITE' => array(
            'title' => t('View Site'),
            'description' => t('View a site')
        ),
        'LIST_SITE' => array(
            'title' => t('List Site'),
            'description' => t('List view of sites')
        ),
        'CREATE_CST' => array(
            'title' => t('Create Cst'),
            'description' => t('Create a new CST')
        ),
        'DELETE_CST' => array(
            'title' => t('Delete Cst'),
            'description' => t('Delete an existing CST')
        ),
        'UPDATE_CST' => array(
            'title' => t('Update Cst'),
            'description' => t('Update an existing CST')
        ),
        'VIEW_CST' => array(
            'title' => t('View Cst'),
            'description' => t('View a CST')
        ),
        'LIST_CST' => array(
            'title' => t('List Cst'),
            'description' => t('List view of CST')
        ),
        'SETTINGS' => array(
            'title' => t('Settings'),
            'description' => t('Set system wide alert boundaries')
        ),
        'STAT_COMPANY' => array(
            'title' => t('Stat Company'),
            'description' => t('Company level statistics')
        ),
        'STAT_SITE' => array(
            'title' => t('Stat Site'),
            'description' => t('Site level statistics')
        ),
        'STAT_CST' => array(
            'title' => t('Stat Cst'),
            'description' => t('CST level statistics')
        ),
        'CHANGE_COMPANY_LOGO' => array(
            'title' => t('Change Company Logo'),
            'description' => t('Sets company logo')
        ),
        'CREATE_CONTENT_GROUP' => array(
            'title' => t('Create Content Group'),
            'description' => t('Create a group of slots')
        ),
        'CREATE_SLOT' => array(
            'title' => t('Create Slot'),
            'description' => t('Create a slot or file type')
        ),
        'ASSIGN_SLOT' => array(
            'title' => t('Assign Slot'),
            'description' => t('Assign a particular slot to a user')
        ),
        'ADD_SLOT_TO_GROUP' => array(
            'title' => t('Add Slot To Group'),
            'description' => t('Add a Slot to a content group')
        ),
        'ADD_FILE_TO_SLOT' => array(
            'title' => t('Add File To Slot'),
            'description' => t('Add file to existing slot (assigned to the role)')
        ),
        'DELETE_FILE_FROM_SLOT' => array(
            'title' => t('Delete File From Slot'),
            'description' => t('Remove a file from an existing slot')
        ),
        'RENT_DEVICE' => array(
            'title' => t('Rent Device'),
            'description' => t('Generate PIN code which would allow renting device')
        ),
        'RENT_TAB' => array(
            'title' => t('Rent Tab'),
            'description' => t('Rent tab view')
        ),
        'ADMINISTRATION_TAB' => array(
            'title' => t('Administration Tab'),
            'description' => t('Administration tab view')
        ),
        'HELP_TAB' => array(
            'title' => t('Help Tab'),
            'description' => t('Help tab view')
        ),
        'SETTINGS_TAB' => array(
            'title' => t('Settings Tab'),
            'description' => t('Settings tab view')
        ),
        'CREATE_SUPERADMIN' => array(
            'title' => t('Create Superadmin'),
            'description' => t('Create a system wide user')
        ),
        'CREATE_SUPERCONTENTADMIN' => array(
            'title' => t('Create Supercontentadmin'),
            'description' => t('System wide user for content management')
        ),
        'CREATE_COMPANYADMIN' => array(
            'title' => t('Create Companyadmin'),
            'description' => t('Company level user')
        ),
        'CREATE_CONTENTADMIN' => array(
            'title' => t('Create Contentadmin'),
            'description' => t('Company company level content management')
        ),
        'CREATE_OPERATOR' => array(
            'title' => t('Create Operator'),
            'description' => t('Lowest level CMS application user')
        ),
    );
}

require_once(DRUPAL_ROOT . "/modules/node/node.pages.inc");

define('AITICO_CORE_TEMPLATE_DIR', drupal_get_path('module', 'aitico_core') . '/templates');
define('AITICO_CORE_MODULE_DIR', drupal_get_path('module', 'aitico_core'));

/**
 * Implementation of hook_theme().
 */
function aitico_core_theme() {

    return array(
        'content_entry_page' => array(
            'variables' => array('title' => NULL, 'content' => NULL),
            'template' => 'content-entry-page',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'company_template' => array(
            'template' => 'company-list',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'company_form' => array(
            'template' => 'company-form',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
    );
}

/**
 * Implementation of hook_menu().
 */
function aitico_core_menu() {
    $items['site/new'] = array(
        'title' => 'Add Site',
        'page callback' => 'add_site_form',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['charging_station/new'] = array(
        'title' => 'Add Charging Station',
        'page callback' => 'add_charging_station_form',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    //COMPANY LIST ACTION
    $items['company'] = array(
        'title' => 'Company',
        'page callback' => 'company_render',
        'access callback' => TRUE, //array('access content'),
        'type' => MENU_NORMAL_ITEM,
    );

    //COMPANY FORM ACTION
    $items['company/new'] = array(
        'title' => 'Add new company',
        'page callback' => 'company_form',
        'access callback' => 'has_access',
        'access arguments' => array('CREATE_COMPANY'),
        'type' => MENU_NORMAL_ITEM,
    );

    //NODE EDIT 
    $items['node/%/edit/%'] = array(
        'title' => '',
        'page callback' => 'edit_aitico_node_form',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    //NODE DELETE
    $items['node/%/delete/%'] = array(
        'title' => '',
        'page callback' => 'delete_aitico_node_form',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    //NODE DELETE
    $items['user/change_password'] = array(
        'title' => '',
        'page callback' => 'change_user_password',
        //'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function change_user_password(){
    $title = "Delete";
    $form = change_password_form();
    $node_edit_form = drupal_render($form);
   
  return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $node_edit_form));  
}

/**
 *
 * @param type $nid
 * @return type 
 * 
 */
function delete_aitico_node_form($nid) {
    $node = node_load($nid);
    $title = "Delete";
    $node_edit_form = drupal_render(drupal_get_form('node_delete_confirm', $node));
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $node_edit_form));
}

/**
 *
 * @param type $nid
 * @return type 
 * 
 */
function edit_aitico_node_form($nid) {
    $node = node_load($nid);
    $title = "Edit";
    $node_edit_form = drupal_render(drupal_get_form($node->type . '_node_form', $node));
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $node_edit_form));
}

/**
 * Site form
 * @return type 
 */
function add_site_form() {
    $title = t("Add Site");
    $node_type = 'site';
    $site_form = get_aitico_node_form($node_type);
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $site_form));
}

/**
 * Charging station form
 * @return type 
 * 
 */
function add_charging_station_form() {
    $title = t("Add Charging Station");
    $node_type = 'charging_station';
    $charging_station_form = get_aitico_node_form($node_type);
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $charging_station_form));
}

/**
 * Implementation of hook_form_alter().
 *
 */
function aitico_core_form_alter(&$form, &$form_state, $form_id) {

    if ($form_id == 'company_node_form') {
        $form['title']['#title'] = t("Company Name");
        $form['additional_settings']['#access'] = FALSE;
        hide($form['body']);
        hide($form['actions']['preview']);

        if (isset($form['nid']['#value']) && !empty($form['nid']['#value'])) {
            $form['actions']['submit']['#value'] = t('Update Company');
            $form['actions']['delete']['#type'] = 'hidden';
        } else {
            $form['actions']['submit']['#value'] = t('Add Company');
        }
    }

    if ($form_id == 'site_node_form') {

        if (!isset($form['nid']['#value']) && empty($form['nid']['#value'])) {
            $parent_id = $_GET['parent_company_id'];
            $form['field_parent_company']['und']['#default_value'] = $parent_id;
            $form['actions']['submit']['#value'] = t('Add Site');
        } else {
            $form['actions']['submit']['#value'] = t('Update Site');
            $form['actions']['delete']['#type'] = 'hidden';
        }

        $form['title']['#title'] = t("Site Name");
        $form['field_parent_company']['#type'] = 'hidden';
        $form['additional_settings']['#access'] = FALSE;
        hide($form['body']);
        hide($form['actions']['preview']);
    }

    if ($form_id == 'charging_station_node_form') {

        if (!isset($form['nid']['#value']) && empty($form['nid']['#value'])) {
            $parent_id = $_GET['parent_site_id'];
            $form['field_parent_site']['und']['#default_value'] = $parent_id;
            $form['actions']['submit']['#value'] = t('Add Charging Station');
        } else {
            $form['actions']['submit']['#value'] = t('Update Charging Station');
            $form['actions']['delete']['#type'] = 'hidden';
        }

        $form['title']['#title'] = t("Charging station name");
        $form['field_parent_site']['#type'] = 'hidden';
        $form['additional_settings']['#access'] = FALSE;
        hide($form['body']);
        hide($form['actions']['preview']);
    }
    if ($form_id == 'node_delete_confirm') {
        $nid = $form['nid']['#value'];
        $node = node_load($nid);

        //change cancel redirection
        $form['actions']['cancel']['#href'] = 'company';
        // add node delete submit handler
        $form['#submit'][] = 'node_delete_submit';

        return confirm_form($form, t('Are you sure you want to delete %title?', array('%title' => $node->title)), 'company',
                        //  isset($_GET['destination']) ? $_GET['destination'] : 'node/' . $node->nid,  
                        t('This action cannot be undone.'), t('Delete'), t('Cancel')
        );
    }
}

/**
 * Rendering tree node list view
 * 
 * @return template 
 */
function company_render() {
    $model = get_model();
    
    $nodes = $model->getTreeNode();        
    return theme('company_template', array("nodes" => $nodes));    
}

/**
 * Company form 
 * 
 * @return template
 */
function company_form($nid = null) {
    $node_type = "company";
    $form = get_aitico_node_form($node_type);

    return theme('company_form', array('form' => $form));
}

/**
 * Aitio core custom model instance
 * 
 * @return aitico_core_model 
 */
function get_model() {
    return new aitico_core_model();
}

function get_aitico_user() {
    return new aitico_core_user();
}

/**
 * Check user permission to access
 * 
 * @param type $arg
 * @return type 
 */
function has_access($arg) {
    return get_aitico_user()->hasAccess($arg);
}

/**
 * Binding node form 
 * 
 * @global User $user
 * @param node $node_type
 * @return form
 */
function get_aitico_node_form($node_type) {
    $node = new stdClass();

//    if($nid){
//        echo $nid;
//        $node = node_load($nid);
//        echo $node->title;
//    }

    $form_id = $node_type . '_node_form';
    global $user;

    $node->uid = $user->uid;
    $node->name = (isset($user->name) ? $user->name : '');
    $node->type = $node_type;
    $node->language = '';

    node_object_prepare($node);
    $form_output = render(drupal_get_form($form_id, $node));

    return $form_output;
}

/**
 * Get a site id list by a company
 * @param int $nid
 * @return type 
 */
function get_all_child_site_of_a_company($nid) {
    $type = "site";
    $sql = "SELECT n.nid FROM {node} n LEFT JOIN  {field_data_field_parent_company} pc ON  pc.entity_id = n.nid 
            WHERE pc.field_parent_company_target_id = :nid AND n.type = :type";
    $site_list = db_query($sql, array(':nid' => $nid, ':type' => $type))->fetchAll();
    return $site_list;
}

/**
 * Get CST id list by a company id
 * @param type $site_id_lists
 * @return type 
 */
function get_all_charging_station_of_a_company($site_id_lists) {
    $type = "charging_station";
    $sql = "SELECT n.nid FROM {node} n LEFT JOIN  {field_data_field_parent_site} ps ON  ps.entity_id = n.nid 
            WHERE ps.field_parent_site_target_id IN($site_id_lists) AND n.type = :type";
    $charging_station_list = db_query($sql, array(':type' => $type))->fetchAll();
    return $charging_station_list;
}

/**
 * Get CST id list by a site id
 * @param type $site_id
 * @return type 
 */
function get_all_charging_station_of_a_site($site_id) {
    $type = "charging_station";
    $sql = "SELECT n.nid FROM {node} n LEFT JOIN  {field_data_field_parent_site} ps ON  ps.entity_id = n.nid 
            WHERE ps.field_parent_site_target_id = :site_id AND n.type = :type";
    $charging_station_list = db_query($sql, array(':site_id' => $site_id, ':type' => $type))->fetchAll();
    return $charging_station_list;
<<<<<<< .mine
}

/**
 * Password change form.
 */
function change_password_form($form, &$form_state) {
    global $user;

    if (!user_is_logged_in()) {
        drupal_access_denied();
    }

    module_load_include('inc', 'user', 'user.pages');
    $form = drupal_get_form('user_profile_form', $user);

    $request_new = l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via e-mail.'))));
    $current_pass_description = t('Enter your current password to change the %pass. !request_new.', array('%pass' => t('Password'), '!request_new' => $request_new));

    $form['account']['current_pass']['#description'] = $current_pass_description;    

    unset(
      $form['account']['name'],
      $form['account']['mail'],
      $form['account']['status'],
      $form['account']['roles'],
      $form['locale'],
      $form['l10n_client'],
      $form['picture'],
      $form['overlay_control'],
      $form['contact'],
      $form['timezone'],
      $form['ckeditor'],
      $form['metatags'],
      $form['redirect']
      );

    return $form;
}

/**
 * Validate handler for change_password_form().
 */
function change_password_form_validate(&$form, &$form_state) {  
  // Make sure the password functions are present.
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

  // Make sure the provided current password is valid for this account.
  if (!user_check_password($form_state['values']['current_pass'], $form['#account'])) {
    form_set_error('current_pass', t('The current password you provided is incorrect.'));
  }
}

 /**
 * Submit handler for change_password_form().
 */
function change_password_form_submit(&$form, &$form_state) {
  // Set up the edit array to pass to user_save()
  $edit = array('pass' => $form_state['values']['pass']);

  // Save the account with the new password.
  user_save($form['#account'], $edit);

  // Inform the user.
  drupal_set_message(t('Your password has been changed.'));
}=======
}
>>>>>>> .r45
