<?php

/**
 * Implements hook_init().
 */
function aitico_core_init() {
    global $user;
    drupal_add_library('system', 'drupal.ajax', true);
    drupal_add_library('system', 'jquery.form', true);
    $user_info = db_query("SELECT cid, sid FROM users_companies_sites WHERE uid =:uid", array(':uid' => $user->uid))->fetch();

    if ($user_info && $user_info->cid) {
        $company_node = node_load($user_info->cid);
        if (isset($company_node->field_company_logo) && !empty($company_node->field_company_logo)) {
            $company_logo = $company_node->field_company_logo['und'][0]['uri'];
            if (file_exists($company_logo)) {
                $user->company_logo = $company_logo;
            }
        }
    }
}

/**
 * Implements hook_permission
 * 
 * @return array
 */
function aitico_core_permission() {

    return array(
        'COMPANY_MANAGE' => array(
            'title' => t('Manage Companies'),
            'description' => t('Create, Delete, and Update a company.')
        ),
        'COMPANY_VIEW_ALL' => array(
            'title' => t('View all Companies'),
            'description' => t('View details of all companies. Details include slots/groups, files, logs, statistics. Details does not include users.')
        ),
        'COMPANY_VIEW_OWN' => array(
            'title' => t('View own Company'),
            'description' => t('View details of own company.')
        ),
        'SITE_MANAGE' => array(
            'title' => t('Manage Sites'),
            'description' => t('Create, Delete, and Update a site.')
        ),
        'SITE_VIEW_ALL' => array(
            'title' => t('View all Sites'),
            'description' => t('View details of all sites of all companies. Details include slots/groups, files, logs, statistics. Details does not include users.')
        ),
        'SITE_VIEW_OWN' => array(
            'title' => t('View own Site'),
            'description' => t('If assigned a site, view details of own site. If assigned a company, view details of all sites of own company.')
        ),
        'CST_MANAGE' => array(
            'title' => t('Manage CSTs'),
            'description' => t('Create, Delete, and Update a CST.')
        ),
        'CST_VIEW_ALL' => array(
            'title' => t('View all CSTs'),
            'description' => t('View details of all CSTs of all sites of all companies. Details include slots/groups, files, logs, statistics, and devices. Details does not include users.')
        ),
        'CST_VIEW_OWN' => array(
            'title' => t('View Own CSTs'),
            'description' => t('If assigned a site, view details of all CSTs of own site. If assigned a company, view details of all CSTs of all sites of own company.')
        ),
        'CST_RENT' => array(
            'title' => t('Rent from a CST'),
            'description' => t('Generate PIN code which would allow renting a device from a CST.')
        ),
       'DEVICE_MANAGE_ALL' => array(
            'title' => t('Manage All Devices'),
            'description' => t('Create, Delete, and Update (status) any Device.')
        ),
       'DEVICE_MANAGE_OWN' => array(
            'title' => t('Manage Own Devices'),
            'description' => t('If assigned a site, Create, Delete, and Update (status) of a Device belonging to CSTs of own site.If assigned a company, Create, Delete, and Update (status) of a Device belonging to CSTs of of all sites of own company')
        ),
        'USER_MANAGE_SYSTEM' => array(
            'title' => t('Manage System Users'),
            'description' => t('Create, Delete, Update, and View system users (Super Admin and Super Content Admin).')
        ),
        'USER_MANAGE_COMPANY_ALL' => array(
            'title' => t('Manage all Company Users'),
            'description' => t('Create, Delete, Update, and View company users (Company Admin, Content Admin, Operator) for all companies.')
        ),
        'USER_MANAGE_COMPANY_OWN' => array(
            'title' => t('Manage own Company Users'),
            'description' => t('Create, Delete, Update, and View company users (Company Admin, Content Admin, Operator) for own company.')
        ),
        'SLOT_MANAGE' => array(
            'title' => t('Manage all Slots and Groups'),
            'description' => t('Create, Delete, and Update File Groups and File Slots.')
        ),
        'FILE_MANAGE_ALL' => array(
            'title' => t('Manage all Files'),
            'description' => t('Create (upload), and Delete files to all slots assigned to Super Content Admin.')
        ),
        'FILE_MANAGE_OWN' => array(
            'title' => t('Manage own Files'),
            'description' => t('Create (upload), and Delete files to own slots assigned to Content Admin.')
        ),
        'FILE_SCHEDULE_ALL' => array(
            'title' => t('Schedule all Files'),
            'description' => t('Schedule files to all slots assigned to Super Content Admin.')
        ),
        'FILE_SCHEDULE_OWN' => array(
            'title' => t('Schedule own Files'),
            'description' => t('Schedule files to own slots assigned to Content Admin.')
        ),
        'SETTINGS_MANAGE' => array(
            'title' => t('Manage Settings'),
            'description' => t('Set system wide alert settings.')
        ),
    );
}

require_once(DRUPAL_ROOT . "/modules/node/node.pages.inc");

//Constant for file_type_code to check if the file for normal file slot or for schedule


define('FILE_TYPE_CODE_SCHEDULE', 0);
define('FILE_TYPE_CODE_NORMAL', 1);
define('FILE_TYPE_CODE_EXPIRED', 2);

define('AITICO_CORE_TEMPLATE_DIR', drupal_get_path('module', 'aitico_core') . '/templates');
define('AITICO_CORE_MODULE_DIR', drupal_get_path('module', 'aitico_core'));

// constant for roles checking
define('CREATE_SUPERADMIN', 'CREATE_SUPERADMIN');
define('CREATE_SUPERCONTENTADMIN', 'CREATE_SUPERCONTENTADMIN');
define('CREATE_COMPANYADMIN', 'CREATE_COMPANYADMIN');
define('CREATE_CONTENTADMIN', 'CREATE_CONTENTADMIN');
define('CREATE_OPERATOR', 'CREATE_OPERATOR');
define('SUPER_ADMIN', 'Super Admin');
define('SUPER_CONTENTADMIN', 'Super Content Admin');
define('CONTENT_ADMIN', 'Content Admin');
define('COMPANY_ADMIN', 'Company Admin');
define('OPERATOR', 'Operator');

/**
 * Implementation of hook_theme().
 * 
 * @return array
 */
function aitico_core_theme() {
    return array(
        'content_entry_page' => array(
            'variables' => array('title' => NULL, 'content' => NULL),
            'template' => 'content-entry-page',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'company_template' => array(
            'template' => 'company-list',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'company_form' => array(
            'template' => 'company-form',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'user_header' => array(
            'variables' => array('title' => NULL, 'content' => NULL),
            'template' => 'company-user-header',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-page' => array(
            'variables' => array(),
            'template' => 'aitico-admin-page',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-company-list' => array(
            'variables' => array(),
            'template' => 'aitico-company-list',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action-edit' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action-edit',
            'render element' => 'form',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action-edit-device' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action-edit-device',            
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action-files' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action-files',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action-file-admin' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action-file-admin',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action-logs' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action-logs',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action-logo' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action-logo',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-action-users' => array(
            'variables' => array(),
            'template' => 'aitico-admin-action-users',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-logs-view' => array(
            'variables' => array(),
            'template' => 'aitico-logs-view',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-core-rent' => array(
            'variables' => array(),
            'template' => 'aitico-core-rent',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-core-rent-pin' => array(
            'variables' => array(),
            'template' => 'aitico-core-rent-pin',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-core-right-page' => array(
            'variables' => array(),
            'template' => 'aitico-core-right-page',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-core-system-page' => array(
            'variables' => array(),
            'template' => 'aitico-core-system-page',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-admin-system-users' => array(
            'variables' => array(),
            'template' => 'aitico-admin-system-users',
            'path' => AITICO_CORE_TEMPLATE_DIR,
        ),
        'aitico-core-schedule' => array(
            'variables' => array('title' => NULL, 'content' => NULL),
            'template' => 'aitico-core-schedule',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'aitico-help' => array(
            'variables' => array(),
            'template' => 'aitico-help',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'aitico-schedule-add-row' => array(
            'variables' => array('title' => NULL, 'content' => NULL),
            'template' => 'aitico-schedule-add-row',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'files_node_form' => array(
            'render element' => 'form',
            'template' => 'files-node-form',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'aitico-schedule-view-group' => array(
            'variables' => array('title' => NULL, 'content' => NULL),
            'template' => 'aitico-schedule-view-group',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
        'aitico-core-devices-list' => array(
            'variables' => array('content' => NULL),
            'template' => 'aitico-admin-action-devices',
            'path' => AITICO_CORE_TEMPLATE_DIR
        ),
    );
}


/**
 * Implements create user access
 * Check if a user has access to create user or not
 * 
 * @param $company_id
 *   Id of a company by which check a user is a company member or not
 * @return boolean
 *   TRUE if user has access, FALSE otherwise
 * 
 */
function aitico_core_create_user_access($company_id) {
    global $user;
    $is_company_member = db_query("SELECT uid FROM {users_companies_sites} WHERE uid = :uid AND cid = :cid", array(
        ':uid' => $user->uid,
        ':cid' => $company_id
            ))->fetch();

    if ($is_company_member) {
        return user_access('USER_MANAGE_COMPANY_OWN');
    }

    return user_access('USER_MANAGE_SYSTEM') || user_access('USER_MANAGE_COMPANY_ALL');
}

/**
 * Implements manage user access
 * Check if a user has access to manage user (edit,delete)
 * 
 * @param $account
 *   The object of user account by which check a user is a site/company memeber or not
 * @return boolean
 *   TRUE if user has access, FALSE otherwise
 */

function aitico_core_manage_user_access($account) {
    global $user;
    $company_site = db_query("SELECT cid, sid FROM {users_companies_sites} WHERE uid =:uid", array(':uid' => $account->uid))->fetch();
    if (!empty($company_site)) {
        $is_company_member = db_query("SELECT uid FROM {users_companies_sites} WHERE uid = :uid AND cid = :cid", array(
            ':uid' => $user->uid,
            ':cid' => $company_site->cid,
                ))->fetch();

        if ($is_company_member) {
            return user_access('USER_MANAGE_COMPANY_OWN');
        }
    }

    return user_access('USER_MANAGE_SYSTEM') || user_access('USER_MANAGE_COMPANY_ALL');
}

/**
 * Implements node delete access
 * Check if a user has access to delete company,site,cst
 * 
 * @return boolean
 *   TRUE if user has access, FALSE otherwise
 */
function aitico_core_node_delete_access() {
    return user_access('COMPANY_MANAGE') || user_access('SITE_MANAGE') || user_access('CST_MANAGE');
}
/**
 * Implements manage device access
 * Check if a user has access to manage device(add,edit,delete)
 *
 * @param $type
 *   Device action type
 * @param $node
 *   Device node object
 * @return boolean
 *   TRUE if user has access, FALSE otherwise 
 */
function aitico_core_manage_device_access($type,$node){
    if($type=='remove' || $type == 'change-status'){
      $cst_id = $node->field_charging_station['und'][0]['target_id'];  
      $cst_node = node_load($cst_id);
    } else if($type=='add') {
       $cst_node = node_load($node);
    }
    $site_id = $cst_node->field_parent_site['und'][0]['target_id'];    
    $site_node = node_load($site_id);
    $company_id = $site_node->field_parent_company['und'][0]['target_id'];
    
    global $user;
    $is_company_member = db_query("SELECT uid FROM {users_companies_sites} WHERE uid = :uid AND cid = :cid", array(
            ':uid' => $user->uid,
            ':cid' => $company_id
                ))->fetch();

        if ($is_company_member) {
            return user_access('DEVICE_MANAGE_OWN') ;
        }



  return user_access('DEVICE_MANAGE_ALL');
}
/**
 * Implements log view access
 * 
 * @return boolean
 *   TRUE if user has access, FALSE otherwise 
 */
function aitico_core_log_view_access() {
    return user_access('COMPANY_VIEW_ALL') || user_access('SITE_VIEW_ALL') || user_access('CST_VIEW_ALL') || user_access('COMPANY_VIEW_OWN');
}

/**
 * Implements edit node view access
 * 
 * @return boolean
 *   TRUE if user has access, FALSE otherwise 
 */
function aitico_core_edit_view_access() {
    $edit_access = user_access('COMPANY_MANAGE') || (user_access('COMPANY_VIEW_OWN') && user_access('USER_MANAGE_COMPANY_OWN'))
            || user_access('SITE_MANAGE') || (user_access('SITE_VIEW_OWN') && user_access('USER_MANAGE_COMPANY_OWN'))
            || user_access('CST_MANAGE') || (user_access('CST_VIEW_OWN') && user_access('USER_MANAGE_COMPANY_OWN'))
            || (user_access('DEVICE_MANAGE_ALL') || user_access('DEVICE_MANAGE_OWN'));

    return $edit_access;
}

/**
 * Implemets file view access
 * 
 * @return boolean
 *   TRUE if user has access, FALSE otherwise 
 */
function aitico_core_files_view_access() {
    //return (user_access('COMPANY_VIEW_ALL') || user_access('SITE_VIEW_ALL') || user_access('CST_VIEW_ALL') || user_access('FILE_MANAGE_ALL') || user_access('FILE_MANAGE_OWN'));
    return user_access('FILE_MANAGE_ALL') || user_access('FILE_MANAGE_OWN');
}
/**
 * Implements device view access
 * 
 * @return boolean
 *   TRUE if user has access, FALSE otherwise 
 */
function aitico_core_device_view_access(){
    return user_access('DEVICE_MANAGE_ALL') || user_access('DEVICE_MANAGE_OWN');
}
/**
 * Implementation of hook_menu().
 * 
 * @return $items
 */
function aitico_core_menu() {

    $items['administration/site/add/%'] = array(
        'title' => 'Add Site',
        'page callback' => 'add_site_form',
        'page arguments' => array(3),
        'access arguments' => array('SITE_MANAGE'),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    $items['administration/cst/add/%'] = array(
        'title' => 'Add Charging Station',
        'page callback' => 'add_charging_station_form',
        'page arguments' => array(3),
        'access arguments' => array('CST_MANAGE'),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );
    
    //NODE EDIT 
    $items['node/%node/edit/%'] = array(
        'title' => '',
        'page callback' => 'edit_aitico_node_form',
        'page arguments' => array(1),
        'access callback' => 'aitico_core_company_view_access',        
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    //COMPANY FORM ACTION
    $items['administration/company/add'] = array(
        'title' => 'Add new company',
        'page callback' => 'company_form',
        'access arguments' => array('COMPANY_MANAGE'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    // USER ADD ACTION    
    $items['administration/user/new/%/%'] = array(
        'title' => 'Add new user',
        'page callback' => 'add_user_form',
        'page arguments' => array(3, 4),
        'access callback' => 'aitico_core_create_user_access',
        'access arguments' => array(3),
        'type' => MENU_LOCAL_TASK,
        'weight' => 5,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    // USER EDIT ACTION
    $items['administration/user/edit/%user'] = array(
        'title' => 'Edit user',
        'page callback' => 'edit_user_form',
        'page arguments' => array(3),
        'access callback' => 'aitico_core_manage_user_access',
        'access arguments' => array(3),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    $items['administration/%/remove/%node'] = array(
        'title' => '',
        'page callback' => 'delete_aitico_node_form',
        'page arguments' => array(3),
        'access callback' => 'aitico_core_node_delete_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );
    //device remove
    $items['administration/device/remove/%node'] = array(
        'title' => '',
        'page callback' => 'delete_aitico_node_form',
        'page arguments' => array(3),
        'access callback' => 'aitico_core_manage_device_access',
        'access arguments' => array(2,3),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );
    $items['user/change-password'] = array(
        'title' => '',
        'page callback' => 'change_user_password',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    $items['user/change-language'] = array(
        'title' => '',
        'page callback' => 'change_user_language',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    // Update right block based on left click in admin page
    $items['administration/info/%/%'] = array(
        'title' => t('Update right block based on left click in admin page'),
        'page callback' => 'update_admin_action',
        'page arguments' => array(2, 3),
        'access callback' => 'aitico_core_admin_info_access',
        'access arguments' => array(2, 3),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    $items['administration/log/%/%/%'] = array(
        'title' => t('Logging'),
        'page callback' => 'get_all_log_info',
        'page arguments' => array(2,3,4),
        'access callback' => 'aitico_core_log_view_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    $items['rent/info/%'] = array(
        'title' => t('Get All information of Rent'),
        'page callback' => 'add_rent_info',
        'page arguments' => array(2),
        'access arguments' => array('CST_RENT'),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_rent_callback.php',
    );


    // Update right block based on system button click

    $items['administration/system/user'] = array(
        'title' => t('Update right block based on left click in admin page'),
        'page callback' => 'update_admin_system_action',
        'access arguments' => array('USER_MANAGE_SYSTEM'),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );

    // Schedule view menu
    $items['administration/schedule/%'] = array(
        'title' => t('Schedule'),
        'page callback' => 'aitico_core_schedule_page',
        'page arguments' => array(2),
        'access callback' => 'aitico_core_schedule_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_schedule_callback.php',
    );

    // Schedule add menu
    $items['administration/schedule/add/%'] = array(
        'title' => t('Schedule'),
        'page callback' => 'aitico_core_add_blank_schedule',
        'page arguments' => array(3),
        'access callback' => 'aitico_core_schedule_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_schedule_callback.php',
    );

    //
    // Schedule view menu
    $items['administration/schedule/group-view/%'] = array(
        'title' => t('Schedule'),
        'page callback' => 'aitico_core_group_schedule',
        'page arguments' => array(3),
        'access callback' => 'aitico_core_schedule_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_schedule_callback.php',
    );
    
    // File remove
    $items['remove-file/%/%'] = array(
        'title' => t('Remove file'),
        'page callback' => 'aitico_core_remove_file',
        'page arguments' => array(1,2),
        'access callback' => 'aitico_core_file_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );
    
     $items['remove-schedule-file/%/%'] = array(
        'title' => t('Remove schedule file'),
        'page callback' => 'aitico_core_remove_schedule_file',
        'page arguments' => array(1,2),
        'access callback' => 'aitico_core_schedule_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_schedule_callback.php',
    );
    
    
     // Schedule remove
    $items['administration/schedule/remove'] = array(
        'title' => '',
        'page callback' => 'delete_aitico_schedule_node',    
        'access callback' => 'aitico_core_schedule_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );
    
    // Refresh files Action
    $items['refresh-file/%'] = array(
        'title' => t('Refresh file'),
        'page callback' => 'aitico_core_refresh_files',
        'page arguments' => array(1),
        'access callback' => 'aitico_core_file_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );
    
      $items['refresh-schedule-file/%'] = array(
        'title' => t('Refresh file'),
        'page callback' => 'refresh_schedule_files',
        'page arguments' => array(1),
        'access callback' => 'aitico_core_schedule_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_schedule_callback.php',
    );
    
      $items['update/schedule/%'] = array(
        'title' => t('Update schedule'),
        'page callback' => 'update_schedule_info',
        'page arguments' => array(2),
        'access callback' => 'aitico_core_schedule_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_schedule_callback.php',
    );
      
     $items['administration/schedule/duplicate/%/%'] = array(
        'title' => t('Duplicate Schedule'),
        'page callback' => 'aitico_core_duplicate_schedule',
        'page arguments' => array(3 , 4),
        'access callback' => 'aitico_core_schedule_manage_access',
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_schedule_callback.php',
    );
      //Device Add
     $items['administration/device/add/%'] = array(
        'title' => 'Add Device',
        'page callback' => 'add_device_form',
        'page arguments' => array(3),
        'access callback' => 'aitico_core_manage_device_access',
        'access arguments' => array(2,3),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );
     //Change Device Status
     $items['administration/device/change-status/%node'] = array(
        'title' => 'Change Device Status',
        'page callback' => 'change_device_status',
        'page arguments' => array(3),
        'access callback' => 'aitico_core_manage_device_access',
        'access arguments' => array(2,3),
        'type' => MENU_CALLBACK,
        'file' => 'page_callbacks/aitico_core_callback.php',
    );
    return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function aitico_core_menu_alter(&$menu) {
    $menu['administration']['page callback'] = 'aitio_core_admin_page';
    $menu['administration']['file'] = 'aitico_core_callback.php';
    $menu['administration']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';

    $menu['settings']['page callback'] = 'aitio_core_settings_page';
    $menu['settings']['file'] = 'settings_callback.php';
    $menu['settings']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';

    $menu['rent']['page callback'] = 'aitio_core_rent_page';
    $menu['rent']['file'] = 'aitico_core_rent_callback.php';
    $menu['rent']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';

    $menu['help']['page callback'] = 'aitico_core_help_page';
    $menu['help']['file'] = 'aitico_core_callback.php';
    $menu['help']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';

    //FIXME
    $menu['filegroup']['page callback'] = 'aitico_filegroup_slots_form_management';
    $menu['filegroup']['file'] = 'aitico_core_callback.php';
    $menu['filegroup']['access callback'] = 'user_access';
    $menu['filegroup']['access arguments'] = array('SLOT_MANAGE');    
    $menu['filegroup']['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';

    //FIXME
    $item = &$menu['user/%user/cancel'];
    $item['page callback'] = 'aitico_core_page_user_delete';
    $item['page arguments'] = array(1);
    $item['access callback'] = 'aitico_core_manage_user_access';
    $item['access arguments'] = array(1);
    $item['theme callback'] = 'aitico_core_get_default_theme';
    $item['file'] = 'aitico_core_callback.php';
    $item['file path'] = drupal_get_path('module', 'aitico_core') . '/page_callbacks';
}

/**
 * Get Default theme 
 */

function aitico_core_get_default_theme() {
    return variable_get('theme_default', '0');
}

/**
 * Implementation of hook_form_alter().
 *
 */
function aitico_core_form_alter(&$form, &$form_state, $form_id) {
    
    $cancel_link = l(t('Cancel'), 'administration',array("attributes" => array("class" => "btn btn-grey btn-small btn-cancel")));            
    
    if ($form_id == 'company_node_form') {
        $form['field_company_logo']['und'][0]['#title'] = t("Company logo");
        $form['title']['#title'] = t("Company Name");
        $form['body']['#title'] = t("Description");
        $form['additional_settings']['#access'] = 0;
        hide($form['actions']['preview']);

        if (isset($form['nid']['#value']) && !empty($form['nid']['#value'])) {
            $form['actions']['submit']['#value'] = t('Save changes');
            $form['actions']['delete']['#type'] = 'hidden';
            if (!user_access('COMPANY_MANAGE')) {
                $form['title']['#access'] = 0;
            }
        } else {
            $form['actions']['submit']['#value'] = t('Add Company');
            $form['field_company_logo']['#access'] = 0;
            hide($form['body']);   
            $form['actions']['cancel'] = array(
                '#markup' => $cancel_link,
                '#weight' => '1000',
            );            
        }

        //$form['#validate'][] = 'aitico_core_node_form_validate';
        // attach custom redirecton
        $form['actions']['submit']['#submit'][] = 'node_add_submit';
    }



    if ($form_id == 'site_node_form') {

        if (!isset($form['nid']['#value']) && empty($form['nid']['#value'])) {
            $form['actions']['submit']['#value'] = t('Add Site');
            hide($form['body']);
            $form['actions']['cancel'] = array(
                '#markup' => $cancel_link,
                '#weight' => '1000',
            );
        } else {
            if (!user_access('SITE_MANAGE')) {
                $form['title']['#access'] = 0;
            }

            $form['actions']['submit']['#value'] = t('Save changes');
            $form['actions']['delete']['#type'] = 'hidden';
        }

        $form['title']['#title'] = t("Site Name");
        $form['field_parent_company']['#access'] = FALSE;
        $form['additional_settings']['#access'] = FALSE;
        hide($form['actions']['preview']);
        //$form['#validate'][] = 'aitico_core_node_form_validate';
        // attach custom redirecton
        $form['actions']['submit']['#submit'][] = 'node_add_submit';
    }

    if ($form_id == 'charging_station_node_form') {


        if (!isset($form['nid']['#value']) && empty($form['nid']['#value'])) {
            $form['actions']['submit']['#value'] = t('Add Charging Station');
            hide($form['body']);
            $form['actions']['cancel'] = array(
                '#markup' => $cancel_link,
                '#weight' => '1000',
            );
        } else {
            if (!user_access('CST_MANAGE')) {
                $form['title']['#access'] = 0;
                $form['field_salt']['#access'] = 0;
                $form['field_mac_address_one']['#access'] = 0;
                $form['field_mac_address_two']['#access'] = 0;
                $form['field_cst_id']['#access'] = 0;
            }


            $form['actions']['submit']['#value'] = t('Save changes');
            $form['actions']['delete']['#type'] = 'hidden';
        }

        $form['title']['#title'] = t("Charging station name");
        $form['field_parent_site']['#access'] = FALSE;
        $form['additional_settings']['#access'] = FALSE;
        $form['field_next_update']['#access'] = FALSE;
        hide($form['actions']['preview']);

        // attach custom redirecton
        //$form['#validate'][] = 'aitico_core_node_form_validate';
        $form['#validate'][] = 'aitico_core_cst_node_form_validate';
        $form['actions']['submit']['#submit'][] = 'node_add_submit';
    }
    //Device node form
    if ($form_id == 'device_node_form') {

        if (!isset($form['nid']['#value']) && empty($form['nid']['#value'])) {
            $form['actions']['submit']['#value'] = t('Add Device');
            $form['actions']['cancel'] = array(
                '#markup' => $cancel_link ,
                '#weight' => '1000',
            );            

        } else {

            $form['actions']['submit']['#value'] = t('Save changes');
            $form['actions']['delete']['#type'] = 'hidden';
        }
        // Hidden title field
        $form['title']['#required'] = FALSE;
        $form['title']['#type'] = 'hidden';
        hide($form['field_loaneduntil']);
        hide($form['field_batterylevel']);
        hide($form['field_statuscode']);
        $form['field_statuscode']['#type'] = 'hidden';
        $form['field_deviceid']['und'][0]['value']['#title'] = t('Device Id');
        $form['field_charging_station']['#access'] = FALSE;
        $form['additional_settings']['#access'] = FALSE;
        hide($form['actions']['preview']);

        //attach custom validation
       // $form['#validate'][] = 'aitico_core_node_form_validate';
        $form['#validate'][] = 'aitico_core_device_node_form_validate';
        // attach custom redirecton
        $form['actions']['submit']['#submit'][] = 'node_add_submit';


    }

    if ($form_id == 'node_delete_confirm') {
        $nid = $form['nid']['#value'];
        $node = node_load($nid);

        //change cancel redirection
        $form['actions']['cancel']['#href'] = 'administration';
        // add node delete submit handler

        $form['#submit'][] = 'node_delete_submit';

        return confirm_form($form, t('Are you sure you want to delete %title?', array('%title' => $node->title)), 'administration', t('This action cannot be undone.'), t('Delete'), t('Cancel')
        );
    }

    if ($form_id == 'user_cancel_confirm_form') {
        $form['user_cancel_confirm']['#default_value'] = 0;
        $description = "Action is not reversable.<br>Are you sure you want to delete user?";
        $form['description']['#markup'] = t($description);
        $form['actions']['submit']['#value'] = t('Delete User');
        $form['actions']['cancel']['#href'] = 'administration';
        $form['#submit'][] = 'aitico_core_user_cancel_confirm_form_submit';

        return confirm_form($form, t('Delete user'), 'company');
    }

    if ($form_id == 'aitico_core_file_upload_form') {
        $form['#action'] = 'administration';
    }

    if ($form_id == 'file_group_node_form') {
        hide($form['actions']['preview']);
        $form['field_cst']['#access'] = FALSE;
        $form['additional_settings']['#access'] = FALSE;
        $form['actions']['submit']['#value'] = t('Add group');
    }


    if ($form_id == 'files_node_form') {
        
        $form['field_file']['#attributes']['class'][] = 'file-group-file';        
        $form['#attributes']['enctype'] = 'multipart/form-data';
        $form['title']['#title'] = '';
        $form['title']['#required'] = FALSE;
        $form['title']['#type'] = 'hidden';
        $form['additional_settings']['#access'] = 0;
        $form['field_slot']['#access'] = 0;
        $form['field_file_schedule']['#access'] = 0;
        $form['field_file_type_code']['#access'] = 0;
        hide($form['actions']['preview']);
        hide($form['field_file']['und'][0]['#description']);
        hide($form['actions']);
        $form['field_file']['und'][0]['#description'] = "";
        $form['field_file']['und'][0]['#title'] = "";        
        $node = $form['#node'];
        $file_node = node_load($node->nid);
        $slot_node = node_load($file_node->field_slot['und'][0]['target_id']);
        $file_type = $slot_node->field_file_type['und'][0]['value'];        
        $form['file_type'] = array('#type' => 'hidden', '#value' => $file_type);

        $file_group_id = $slot_node->field_filegroup['und'][0]['target_id'];
        
        if ($file_node->field_file_type_code['und'][0]['value'] == FILE_TYPE_CODE_SCHEDULE)
            $form['#action'] = '/administration/schedule/group-view/'.$file_group_id;
    }
}


/**
 * Submit handler for node add form 
 * and redirection to administration page
 * 
 * @param $form
 * 
 * @param $form_state 
 */
function node_add_submit($form, &$form_state) {
    $form_state['redirect'] = 'administration';
}

/**
 * Submit handler for node delete form
 * and redirection to administration page
 * 
 * @param $form
 * 
 * @param $form_state 
 */
function node_delete_submit($form, &$form_state) {
    $node = $form_state['build_info']['args'][0];
    $nid = $node->nid;
    $node_type = $node->type;
    

    if ($node_type == 'company') {
        //get all child site
        $site_id_list = get_all_child_site_of_a_company($nid);
        $site_id_arr = array();
        foreach ($site_id_list as $site_id_row) {
            $site_id_arr[] = $site_id_row->nid;
        }
        $site_id_lists = implode(',', $site_id_arr);

        if (!empty($site_id_lists)) {

            //get all child cst
            $cst_id_list = get_all_charging_station_of_a_company($site_id_lists);
            $cst_id_arr = array();
            foreach ($cst_id_list as $cst_id_row) {
                $cst_id_arr[] = $cst_id_row->nid;
            }
            $cst_id_lists = implode(',', $cst_id_arr);
            //delete cst node
            node_delete_multiple($cst_id_arr);
        }
        //delete site node
        node_delete_multiple($site_id_arr);
    }
    if ($node_type == 'site') {
        $site_id = $nid;
        //get all child cst for a site
        $cst_id_list = get_all_charging_station_of_a_site($site_id);
        $cst_id_arr = array();
        foreach ($cst_id_list as $cst_id_row) {
            $cst_id_arr[] = $cst_id_row->nid;
        }
        $cst_id_lists = implode(',', $cst_id_arr);
        //delete cst node
        node_delete_multiple($cst_id_arr);
    }

    $form_state['redirect'] = 'administration';
}

/**
 * Submit handler for the account cancellation confirm form
 * and redirection to administration page
 * 
 * @param $form
 * 
 * @param $form_state
 * 
 */
function aitico_core_user_cancel_confirm_form_submit($form, &$form_state) {
    global $user;
    $account = $form_state['values']['_account'];

    // Cancel account immediately, if the current user has administrative
    // privileges, no confirmation mail shall be sent, and the user does not
    // attempt to cancel the own account.
    if ((aitico_core_manage_user_access($account) && empty($form_state['values']['user_cancel_confirm']) && $account->uid != $user->uid)) {
        user_cancel($form_state['values'], $account->uid, $form_state['values']['user_cancel_method']);

        $form_state['redirect'] = 'administration';
    } else {
        // Store cancelling method and whether to notify the user in $account for
        // user_cancel_confirm().
        $edit = array(
            'user_cancel_method' => $form_state['values']['user_cancel_method'],
            'user_cancel_notify' => $form_state['values']['user_cancel_notify'],
        );
        $account = user_save($account, $edit);
        _user_mail_notify('cancel_confirm', $account);
        drupal_set_message(t('A confirmation request to cancel your account has been sent to your e-mail address.'));
        watchdog('user', 'Sent account cancellation request to %name %email.', array('%name' => $account->name, '%email' => '<' . $account->mail . '>'), WATCHDOG_NOTICE);

        $form_state['redirect'] = "administration";
    }
}

/**
 * Get aitico_core_model model instance
 * 
 * @return aitico_core_model instance
 */
function get_model() {
    return new aitico_core_model();
}
/**
 * Get aitico_core_user model instance
 * 
 * @return aitico_core_user instance
 */
function get_aitico_user() {
    return new aitico_core_user();
}

/**
 * Check user permission to access
 * 
 * @param $arg
 * 
 * @return boolean 
 */
function has_access($arg) {
    return get_aitico_user()->hasAccess($arg);
}

/**
 * Handle user registration form submit
 * 
 * @param $form
 * 
 * @param $form_state
 */
function aitico_core_user_form_submit($form, &$form_state) {
    $name = $form_state['values']['name'];
    $pass = $form_state['values']['pass'];
    $mail = $form_state['values']['mail'];
    $role = $form_state['values']['roles'];
    $companyId = $form['#companyId'];
    $siteId = $form['#siteId'];
    //echo 'companyId=' . $comapnyId . ' siteId=' . $siteId; exit;
    $new_user = array(
        'name' => $name,
        'pass' => $pass,
        'status' => 1,
        'mail' => $mail,
    );
    $user = user_save(null, $new_user);
    // now save roles
    db_insert('users_roles')
            ->fields(array(
                'uid' => $user->uid,
                'rid' => $role,
                    )
            )
            ->execute();

    // now save company and site

    if ($companyId != 0) {
        db_insert('users_companies_sites')
                ->fields(array(
                    'uid' => $user->uid,
                    'cid' => $companyId,
                    'sid' => $siteId,
                        )
                )
                ->execute();
    }

    drupal_set_message(t('User has been added successfully'), 'status');
}

/**
 * Handle user edit form submit
 * 
 * @param $form
 * 
 * @param $form_state
 */
function aitico_core_user_edit_form_submit($form, &$form_state) {
    $account = $form_state['#account'];
    $account_unchanged = clone $account;
    entity_form_submit_build_entity('user', $account, $form, $form_state);

    // Populate $edit with the properties of $account, which have been edited on
    // this form by taking over all values, which appear in the form values too.   
    $edit = array_intersect_key((array) $account, $form_state['values']);
    $edit["roles"] = array($edit["roles"] => "");

    $user = user_save($account_unchanged, $edit);

    // Reload user roles if provided.
    $role = $form_state['values']['roles'];

    db_insert('users_roles')
            ->fields(array(
                'uid' => $account->uid,
                'rid' => $role,
                    )
            )
            ->execute();
    drupal_set_message(t('User has been updated successfully'), 'status');
}

/**
 * Performs validation for aitico_core_user_form().
 *
 * @param $form
 * 
 * @param $form_state
 */
function aitico_core_user_form_validate($form, &$form_state) {
    
    
    // Validate new or changing username.
    $isUser = (bool) db_query("SELECT uid FROM {users} WHERE name = :name ", array(':name' => $form_state['values']['name']))->fetchField();
    if (isset($form_state['values']['name'])) {
        if ($error = user_validate_name($form_state['values']['name'])) {
            form_set_error('name', $error);
        } elseif ($isUser) {
            form_set_error('name', t('The name %name is already taken.', array('%name' => $form_state['values']['name'])));
        }
    }
    
    $pass = $form_state['values']['pass'];
    
    if(isset($pass) && strlen($pass) < 10){
        form_set_error('pass', 'Password must be minimum of 10 characters.');
    } 
    
    
    // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
    // warnings often caused by cutting and pasting.
    $mail = trim($form_state['values']['mail']);
    form_set_value($form['account']['mail'], $mail, $form_state);

    $isExistsEmail = (bool) db_query("SELECT uid FROM {users} WHERE mail = :mail ", array(':mail' => $form_state['values']['mail']))->fetchField();


    // Validate the e-mail address, and check if it is taken by an existing user.
    if ($error = user_validate_mail($form_state['values']['mail'])) {
        form_set_error('mail', $error);
    } elseif ($isExistsEmail) {
        // Format error message dependent on whether the user is logged in or not.
        if ($GLOBALS['user']->uid) {
            form_set_error('mail', t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['mail'])));
        } else {
            form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
        }
    }
}

/**
 * Performs validation for password change form.
 * 
 * @param $form 
 * 
 * @param $form_state
 */
function aitico_core_password_form_validate($form, &$form_state) {

    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $account = $form_state['#account'];
    // Make sure the provided current password is valid for this account.
    $current_pass_failed = empty($form_state['values']['current_pass']) || !user_check_password($form_state['values']['current_pass'], $account);
    if ($current_pass_failed) {
        form_set_error('current_pass', t('The current password you provided is incorrect.'));
    }
}

/**
 * Password change form submit.
 * 
 * @param $form
 * 
 * @param $form_state
 */
function aitico_core_password_form_submit($form, &$form_state) {
    global $user;

    $account = $form_state['#account'];

    $pass = $form_state['values']['pass'];

    user_save($account, array('pass' => $pass));
    drupal_set_message(t('Password has been changed.'));
}

/**
 * Check user is login, if not redirect to login page
 *  
 * 
 */
function check_user_is_login() {
    if (user_is_logged_in()) {
        return true;
    } else {
        $path = "user/login";
        drupal_goto($path);
    }
}

/**
 * Performs validation for charging station node form 
 * 
 * @param $form
 * 
 * @param $form_state 
 */
function aitico_core_cst_node_form_validate($form, &$form_state) {

    $cst_id = $form_state['values']['field_cst_id']['und'][0]['value'];

    $query = "SELECT field_cst_id_value FROM {field_data_field_cst_id} WHERE field_cst_id_value = :value";
    $result = db_query($query, array(':value' => $cst_id))->fetch();

    if (!empty($result) && (!isset($form['nid']['#value']) && empty($form['nid']['#value']))) {
        form_set_error('field_cst_id', 'CST id is already in use, please choose another one.');
    }
}


/**
 * Implementation of hook_form_validate
 * 
 * @param $form
 * 
 * @param $form_state
 */
function aitico_core_node_form_validate($form, &$form_state) {

    $pattern1 = '/[^\x{80}-\x{F7} a-z0-9@_.\'-]/i';
    $pattern2 = '/[\x{80}-\x{A0}' .         // Non-printable ISO-8859-1 + NBSP
        '\x{AD}' .                // Soft-hyphen
        '\x{2000}-\x{200F}' .     // Various space characters
        '\x{2028}-\x{202F}' .     // Bidirectional text overrides
        '\x{205F}-\x{206F}' .     // Various text hinting characters
        '\x{FEFF}' .              // Byte order mark
        '\x{FF01}-\x{FF60}' .     // Full-width latin
        '\x{FFF9}-\x{FFFD}' .     // Replacement characters
        '\x{0}-\x{1F}]/u';

    $node = $form_state['build_info']['args'][0];
    $node_title = $form_state['values']['title'];
    $error_message = format_string('The %type field(s) contains illegal character.', array('%type' => $node->type));

    if($node->type == 'device'){
        $device_id = $form_state['values']['field_deviceid']['und'][0]['value'];
        $mac_address = $form_state['values']['field_device_mac_address']['und'][0]['value'];
        if(preg_match($pattern1 ,$device_id ) || preg_match($pattern1 ,$mac_address )){
            form_set_error('error' , $error_message);
        }
        if(preg_match($pattern2 ,$device_id ) || preg_match($pattern2 ,$mac_address )){
            form_set_error('error' , $error_message);
        }
    }else if($node->type == 'charging_station'){

        $salt = $form_state['values']['field_salt']['und'][0]['value'];
        $cst_id = $form_state['values']['field_cst_id']['und'][0]['value'];
        $mac_one = $form_state['values']['field_mac_address_one']['und'][0]['value'];
        $mac_two = $form_state['values']['field_mac_address_two']['und'][0]['value'];

        if(preg_match($pattern1 ,$node_title ) ||
           preg_match($pattern1 ,$salt ) ||
           preg_match($pattern1 ,$cst_id ) ||
           preg_match($pattern1 ,$mac_one ) ||
           preg_match($pattern1 ,$mac_two )){
           form_set_error('error' , $error_message);
        }
        if(preg_match($pattern2 ,$node_title ) ||
            preg_match($pattern2 ,$salt ) ||
            preg_match($pattern2 ,$cst_id ) ||
            preg_match($pattern2 ,$mac_one ) ||
            preg_match($pattern2 ,$mac_two )){
            form_set_error('error' , $error_message);
        }

    }else{
        if(preg_match($pattern1 ,$node_title )){
            form_set_error('error' , $error_message);
        }
        if(preg_match($pattern2 ,$node_title )){
            form_set_error('error' , $error_message);
        }
    }
}


/**
 * Get Files node
 * 
 * @param $slot_node_id
 *   File slot node ID
 * 
 * @param $file_type_code
 *   File type code whether it is schedule file or not
 * 
 * @param $file_schedule_id 
 *   Schedule node ID
 * 
 * @return $node
 *   An updated node object 
 */
function get_files_node($slot_node_id, $file_type_code, $file_schedule_id = null) {

    $query = new EntityFieldQuery();
    $query = $query
                    ->entityCondition('entity_type', 'node')
                    ->propertyCondition('type', "files")
                    ->fieldCondition('field_slot', 'target_id', $slot_node_id, '=')
                    ->fieldCondition('field_file_type_code', 'value', $file_type_code, '=');
    
    if($file_schedule_id){
       $query = $query->fieldCondition('field_file_schedule', 'target_id', $file_schedule_id, '=');
    }
    
    $result = $query->execute();

    if ($result) {
        $node = array_slice($result['node'], 0, 1);
        $node = current($node);
        return node_load($node->nid);
    }

    $node = get_prepare_new_node("files");
    $node->title = "slot file";
    $node->field_slot["und"][0]["target_id"] = $slot_node_id;
    $node->field_file_type_code['und']['0']['value'] = $file_type_code;
    
    if($file_schedule_id)
        $node->field_file_schedule["und"][0]["target_id"] = $file_schedule_id;
    
    try {
        node_save($node);
        return node_load($node->nid);
    } catch (Exception $e) {
        drupal_set_message($e->getTraceAsString(), "Error");
    }

    return $node;
}


/**
 * Get file shedule based on parent group id
 * 
 * @param $file_group_id
 *   File group node ID
 * @return $node
 *   An updated node object
 */

function get_file_schedule($file_group_id){
    $node = get_prepare_new_node("file_schedule");
    $node->title = "File Schedule";    
    $node->field_parent_file_group["und"][0]["target_id"] = $file_group_id;
    $node->field_schedule_time['und'][0]['value'] = time();
 
    try {
        node_save($node);
        return node_load($node->nid);
    } catch (Exception $e) {
        drupal_set_message($e->getTraceAsString(), "Error");
    }

    return $node;
    
}


/**
 * Prepare new node 
 * 
 * @param $type 
 *   A node Type
 * 
 * @return $node
 *   An updated node object
 */
function get_prepare_new_node($type) {
    global $user;

    $node = new stdClass();
    $node->uid = $user->uid;
    $node->name = (isset($user->name) ? $user->name : '');
    $node->type = $type;
    $node->language = 'und';
    $node->status = 1;
    node_object_prepare($node);

    return $node;
}

/**
 * Get node form 
 * 
 * 
 * @param $node_type
 *   A node Type
 * @param $parent_id
 *   A parent node ID
 * @param $node
 *   A node object
 * @return $form_output
 *   A node form
 */
function get_aitico_node_form($node_type, $parent_id, $node = null) {

    $form_id = $node_type . '_node_form';

    if (!isset($node)) {
        $node = get_prepare_new_node($node_type);
    }

    if ($node_type == 'site') {
        $node->field_parent_company['und'][0]['target_id'] = $parent_id;
    }

    if ($node_type == 'charging_station') {
        $node->field_parent_site['und'][0]['target_id'] = $parent_id;
    }
    if($node_type == 'device'){
        $node->field_charging_station['und'][0]['target_id'] = $parent_id;
        //$node->status = 1;
        //Set initial status in-service
        $node->field_statuscode['und'][0]['value'] = SERVICE;


    }
    if ($node_type == 'files') {
        $node->title = 'slot file';
        $node->field_slot['und'][0]['target_id'] = $parent_id;
    }

    $form = drupal_get_form($form_id, $node);      
    $form_output = drupal_render($form);
    
    return $form_output;
}



/**
 * Implements company view access 
 * 
 * @return boolean
 *   TRUE if a user has access,FALSE otherwise
 *   
 */

function aitico_core_company_view_access(){    
        return user_access('COMPANY_VIEW_OWN') || user_access('COMPANY_MANAGE') || user_access('COMPANY_VIEW_ALL') || user_access('DEVICE_MANAGE_ALL') || user_access('DEVICE_MANAGE_OWN') ;
}



/**
 * Implements file manage access
 * 
 * @return boolean
 *   TRUE if a user has access,FALSE otherwise
 */

function aitico_core_file_manage_access(){    
        return user_access('FILE_MANAGE_ALL') || user_access('FILE_MANAGE_OWN') ;
}


/**
 * Implements schedule manage access
 * 
 * @return boolean
 *   TRUE if a user has access,FALSE otherwise
 */

function aitico_core_schedule_manage_access(){    
        return user_access('FILE_SCHEDULE_ALL') || user_access('FILE_SCHEDULE_OWN') ;
}

/**
 * Performs validation for device node form
 * 
 * @param $form
 * 
 * @param $form_state
 */
function aitico_core_device_node_form_validate(&$form, &$form_state) {

    $device_id = $form_state['values']['field_deviceid']['und'][0]['value'];
    $mac_address = $form_state['values']['field_device_mac_address']['und'][0]['value'];
    $form_state['values']['title'] = $device_id;
    //check duplicate device id
    $query = "SELECT field_deviceid_value FROM {field_data_field_deviceid} WHERE field_deviceid_value = :value";
    $result = db_query($query, array(':value' => $device_id))->fetch();

    if (!empty($result) && (!isset($form['nid']['#value']) && empty($form['nid']['#value']))) {
        form_set_error('field_deviceid', 'Device id is already in use, please choose another one.');
    }
    //check duplicate mac address
    $mac_address_query = "SELECT field_device_mac_address_value FROM {field_data_field_device_mac_address} WHERE field_device_mac_address_value = :value";
    $mac_address_result = db_query($mac_address_query, array(':value' => $mac_address))->fetch();
    
    if (!empty($mac_address_result) && (!isset($form['nid']['#value']) && empty($form['nid']['#value']))) {
        form_set_error('field_device_mac_address', 'MAC address is already in use, please choose another one.');
    }

}
/**
 * Implements hook_user_logout
 * 
 * @param $account 
 */
function aitico_core_user_logout($account) {
    
    setcookie('aitico_tree_info',"",time()+15*60, "/");
    setcookie('aitico_tree_info_selected',"",time()+15*60, "/");
}

/**
 * Implements right panel information access while clicking on left tree
 * in administration page
 * 
 * @param $node_type
 *   A node Type
 * @param $nid
 *   A node ID
 * @return boolean
 *   TRUE if a user has access,FALSE otherwise
 */

function aitico_core_admin_info_access($node_type , $nid){        
    
    global $user;
    if ($node_type == 'company') {
        $company_id = $nid;        
    } else if ($node_type == 'site') {       
        $site_id = $nid;
        $site_node = node_load($site_id);  
        $company_id = $site_node->field_parent_company['und'][0]['target_id'];              
    } else if ($node_type == 'charging_station') {
        $cst_id = $nid;
        $cst_node = node_load($cst_id);
        $site_id = $cst_node->field_parent_site['und'][0]['target_id'];
        $site_node = node_load($site_id);
        $company_id = $site_node->field_parent_company['und'][0]['target_id'];  
    }elseif($node_type == 'device'){
        $device_id = $nid;
        $device_node = node_load($device_id);
        $cst_id = $device_node->field_charging_station['und'][0]['target_id'];
        $cst_node = node_load($cst_id);
        $site_id = $cst_node->field_parent_site['und'][0]['target_id'];
        $site_node = node_load($site_id);
        $company_id = $site_node->field_parent_company['und'][0]['target_id']; 
     }
          
        $is_company_member = db_query("SELECT uid FROM {users_companies_sites} WHERE uid = :uid AND cid = :cid", array(
            ':uid' => $user->uid,
            ':cid' => $company_id
                ))->fetch();

        if ($is_company_member) {
            return user_access('COMPANY_VIEW_OWN');
        }

        return user_access('COMPANY_MANAGE') || user_access('COMPANY_VIEW_ALL');
    }
    
