<?php


/**
 * Override of the standard user deletion page. Shows a confirmation box
 * with the user profile visible underneath.
 */
function aitico_core_page_user_delete($user) {
    module_load_include('inc', 'user', 'user.pages');
    $title = "Delete User";
    //$title = t("Delete user @name?", array('@name' => _aitico_user_name($user->uid)));
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => render(drupal_get_form('user_cancel_confirm_form', $user))));
}

/**
 * Password Change
 * @param type $uid
 * @return type 
 */
function change_user_password($uid) {

    $title = "Change Password";
    $account = user_load($uid);
    $form = drupal_get_form('aitico_core_password_form', $account);
    $change_password_form = drupal_render($form);

    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $change_password_form));
}

/**
 * Add user form
 * @return theme
 */
function add_user_form($companyId, $siteId=0) {
    $user_form = render(drupal_get_form('aitico_core_user_form', $companyId, $siteId));
    $title = "Edit User";
    return theme('content_entry_page', array('form_title' => $title,
                'node_add_form' => $user_form));
}

/**
 * User edit form
 * @param type $uid
 */
function edit_user_form($uid) {
    $user = user_load($uid);
    $title = "Edit User";
    $user_form = render(drupal_get_form('aitico_core_user_edit_form', $user));
    return theme('content_entry_page', array('form_title' => $title,
                'node_add_form' => $user_form));
}

/**
 * Get user list
 * 
 * @return template 
 */
function user_render($company_id, $site_id = null) {
    //query for user list
    $user_sql = "SELECT u.*,ucs.cid,ucs.sid,r.name as role 
            FROM {users} u ,{users_companies_sites} ucs,{users_roles} ur,{role} r 
            WHERE ucs.uid = u.uid AND ur.uid=u.uid AND ur.rid = r.rid AND ucs.cid = $company_id";
    if (isset($site_id) && $site_id != "0") {
        $user_sql .= " AND ucs.sid = $site_id";
    }
    $user_res = db_query($user_sql)->fetchAll(PDO::FETCH_ASSOC);

    return theme('aco_user_list', array('user_lists' => $user_res));
}

/**
 *
 * @param type $nid
 * @return type 
 * 
 */
function delete_aitico_node_form($nid) {
    $node = node_load($nid);
    $title = "Delete";
    $node_edit_form = drupal_render(drupal_get_form('node_delete_confirm', $node));
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $node_edit_form));
}

/**
 *
 * @param type $nid
 * @return type 
 * 
 */
function edit_aitico_node_form($node) {
    module_load_include('inc', 'node', 'node.pages');
    $title = "Edit";
    $node_edit_form = drupal_render(drupal_get_form($node->type . '_node_form', $node));
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $node_edit_form));
}

/**
 * Site form
 * @return type 
 */
function add_site_form() {
    $title = t("Add Site");
    $node_type = 'site';
    $site_form = get_aitico_node_form($node_type);
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $site_form));
}

/**
 * Charging station form
 * @return type 
 * 
 */
function add_charging_station_form() {
    $title = t("Add Charging Station");
    $node_type = 'charging_station';
    $charging_station_form = get_aitico_node_form($node_type);
    return theme('content_entry_page', array('form_title' => $title, 'node_add_form' => $charging_station_form));
}


/**
 * Rendering tree node list view
 * 
 * @return template 
 */
function company_render() {
    $model = get_model();

    $nodes = $model->getTreeNode();
    return theme('company_template', array("nodes" => $nodes));
}

/**
 * Company form 
 * 
 * @return template
 */
function company_form($nid = null) {   
    $node_type = "company";
    $form = get_aitico_node_form($node_type);

    return theme('company_form', array('form' => $form));
}


/**
 * Binding node form 
 * 
 * @global User $user
 * @param node $node_type
 * @return form
 */
function get_aitico_node_form($node_type) {
    $node = new stdClass();

//    if($nid){
//        echo $nid;
//        $node = node_load($nid);
//        echo $node->title;
//    }

    $form_id = $node_type . '_node_form';
    global $user;

    $node->uid = $user->uid;
    $node->name = (isset($user->name) ? $user->name : '');
    $node->type = $node_type;
    $node->language = '';

    node_object_prepare($node);
    $form_output = render(drupal_get_form($form_id, $node));

    return $form_output;
}

/**
 * Add user form
 * @param $form 
 * @param &$form_state
 */
function aitico_core_user_form($form, &$form_state, $companyId, $siteId) {
    global $user;
    $form['#validate'][] = 'aitico_core_user_form_validate';
    $form['#companyId'] = $companyId;
    $form['#siteId'] = $siteId;
    // Account information.
    $form['account'] = array(
        '#type' => 'container',
        '#weight' => -10,
    );
    $form['account']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#required' => TRUE,
    );
    $form['account']['mail'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#maxlength' => EMAIL_MAX_LENGTH,
        '#required' => TRUE,
    );

    $form['account']['pass'] = array(
        '#type' => 'password_confirm',
        '#size' => 25,
        '#required' => TRUE,
    );

    $options = getRoles();
    $form['account']['roles'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => t('Roles'),
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save User'),
    );

    return $form;
}

/**
 * Add user form
 * @param $form
 * @param $form_state
 * @param $account
 */
function aitico_core_user_edit_form($form, &$form_state, $account) {
    global $user;

    $form['#account'] = $account;
    $form_state['#account'] = $account;
    // Account information.
    $form['account'] = array(
        '#type' => 'container',
        '#weight' => -10,
    );
    $form['account']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#required' => TRUE,
        '#default_value' => ($account ? $account->name : ''),
    );
    $form['account']['mail'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#maxlength' => EMAIL_MAX_LENGTH,
        '#required' => TRUE,
        '#default_value' => ($account ? $account->mail : ''),
    );

    $form['account']['pass'] = array(
        '#type' => 'password_confirm',
        '#size' => 25,
    );

    $options = getRoles();
    $form['account']['roles'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#title' => t('Roles'),
        '#required' => TRUE,
        '#default_value' => ($account ? array_keys($account->roles) : ''),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save User'),
    );

    return $form;
}

/**
 * 
 * @global User $user
 * @return $options
 */
function getRoles() {
    global $user;
    // the permissions list
    $roles = array();
    // now get all permissions of logged in user
    $sql = "select rp.permission pr
             from users u, users_roles ur, role r, role_permission rp 
             where u.uid=ur.uid 
             and ur.rid = r.rid 
             and r.rid = rp.rid 
             and r.rid !=2
             and u.uid=" . $user->uid;
    $rows = db_query($sql);

    $roleNames = "";
    foreach ($rows as $row) {
        if ($row->pr == CREATE_SUPERADMIN) {
            // get superadmin role
            $roleNames = $roleNames . "'" . SUPER_ADMIN . "'" . ',';
        }
        if ($row->pr == CREATE_SUPERCONTENTADMIN) {
            // get supercontentadmin role
            $roleNames = $roleNames . "'" . SUPER_CONTENTADMIN . "'" . ',';
        }
        if ($row->pr == CREATE_COMPANYADMIN) {
            // get companyadmin role
            $roleNames = $roleNames . "'" . COMPANY_ADMIN . "'" . ',';
        }
        if ($row->pr == CREATE_CONTENTADMIN) {
            // get contentadmin role
            $roleNames = $roleNames . "'" . CONTENT_ADMIN . "'" . ',';
        }
        if ($row->pr == CREATE_OPERATOR) {
            // get operator role
            $roleNames = $roleNames . "'" . OPERATOR . "'" . ',';
        }
    }
    
    $options = array();
    if ($roleNames != "") {
        $lastComa = strripos($roleNames, ",");
        $roleNames = substr($roleNames, 0, $lastComa);
        // now get the role list from db
        $roleSql = "select rid, name 
                    from role
                    where name in (" . $roleNames . ")";
        $roleRows = db_query($roleSql);
        foreach ($roleRows as $row) {
            $options[$row->rid] = t($row->name);
        }
    }

    return $options;
}


/**
 * Password change form.
 */
function aitico_core_password_form($form, &$form_state, $account) {

    global $user;
    $form['#account'] = $account;
    $form_state['#account'] = $account;
    $form['#user'] = $account;
    $current_pass_description = t('Enter your current password to change the  %pass.', array('%pass' => t('password')));

    $form['account']['current_pass'] = array(
        '#type' => 'password',
        '#title' => t('Current password'),
        '#size' => 25,
        '#required' => TRUE,
        '#description' => $current_pass_description,
        '#attributes' => array('autocomplete' => 'off'),
    );

    $form['account']['pass'] = array(
        '#type' => 'password_confirm',
        '#size' => 25,
        '#required' => TRUE,
        '#description' => t('To change the current user password, enter the new password in both fields.'),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
    );

    return $form;
}


/*
 * Implementation of admin page callback
 */

function aitio_core_admin_page(){
    return '';
}

/*
 * Implementation of admin page callback
 */

function aitio_core_settings_page(){
    return '';
}


/*
 * Implementation of admin page callback
 */


function aitio_core_help_page(){
    return '';
}

/*
 * Implementation of admin page callback
 */

function aitio_core_rent_page(){
    return '';
}



